/*
 * generated by Xtext 2.32.0
 */
package pt.up.fe.els2023.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MyDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.MyDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0 = (RuleCall)cAssignmentAssignment_0.eContents().get(0);
		private final Assignment cExportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExportExportParserRuleCall_1_0 = (RuleCall)cExportAssignment_1.eContents().get(0);
		
		//MyDsl:
		//    assignment += Assignment*
		//    export += Export*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment += Assignment*
		//export += Export*
		public Group getGroup() { return cGroup; }
		
		//assignment += Assignment*
		public Assignment getAssignmentAssignment_0() { return cAssignmentAssignment_0; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0() { return cAssignmentAssignmentParserRuleCall_0_0; }
		
		//export += Export*
		public Assignment getExportAssignment_1() { return cExportAssignment_1; }
		
		//Export
		public RuleCall getExportExportParserRuleCall_1_0() { return cExportExportParserRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpressionAlternatives_2_0 = (Alternatives)cExpressionAssignment_2.eContents().get(0);
		private final RuleCall cExpressionPipelineParserRuleCall_2_0_0 = (RuleCall)cExpressionAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionSourceParserRuleCall_2_0_1 = (RuleCall)cExpressionAlternatives_2_0.eContents().get(1);
		private final RuleCall cExpressionTableParserRuleCall_2_0_2 = (RuleCall)cExpressionAlternatives_2_0.eContents().get(2);
		
		//Assignment:
		//    name = ID '=' expression=(Pipeline|Source|Table)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID '=' expression=(Pipeline|Source|Table)
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=(Pipeline|Source|Table)
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//(Pipeline|Source|Table)
		public Alternatives getExpressionAlternatives_2_0() { return cExpressionAlternatives_2_0; }
		
		//Pipeline
		public RuleCall getExpressionPipelineParserRuleCall_2_0_0() { return cExpressionPipelineParserRuleCall_2_0_0; }
		
		//Source
		public RuleCall getExpressionSourceParserRuleCall_2_0_1() { return cExpressionSourceParserRuleCall_2_0_1; }
		
		//Table
		public RuleCall getExpressionTableParserRuleCall_2_0_2() { return cExpressionTableParserRuleCall_2_0_2; }
	}
	public class CombinationOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.CombinationOperations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperationAlternatives_0_0 = (Alternatives)cOperationAssignment_0.eContents().get(0);
		private final Keyword cOperationMergeKeyword_0_0_0 = (Keyword)cOperationAlternatives_0_0.eContents().get(0);
		private final Keyword cOperationAppendKeyword_0_0_1 = (Keyword)cOperationAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeUnionKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeIntersectionKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableOperationTableOperationsParserRuleCall_3_0 = (RuleCall)cTableOperationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTableOperationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTableOperationTableOperationsParserRuleCall_4_1_0 = (RuleCall)cTableOperationAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CombinationOperations:
		//    operation = ('merge' | 'append') type = ("union" | "intersection")?  "["
		//        tableOperation += TableOperations (',' tableOperation+=TableOperations)* (',')?
		//    "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operation = ('merge' | 'append') type = ("union" | "intersection")?  "["
		//    tableOperation += TableOperations (',' tableOperation+=TableOperations)* (',')?
		//"]"
		public Group getGroup() { return cGroup; }
		
		//operation = ('merge' | 'append')
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//('merge' | 'append')
		public Alternatives getOperationAlternatives_0_0() { return cOperationAlternatives_0_0; }
		
		//'merge'
		public Keyword getOperationMergeKeyword_0_0_0() { return cOperationMergeKeyword_0_0_0; }
		
		//'append'
		public Keyword getOperationAppendKeyword_0_0_1() { return cOperationAppendKeyword_0_0_1; }
		
		//type = ("union" | "intersection")?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//("union" | "intersection")
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//"union"
		public Keyword getTypeUnionKeyword_1_0_0() { return cTypeUnionKeyword_1_0_0; }
		
		//"intersection"
		public Keyword getTypeIntersectionKeyword_1_0_1() { return cTypeIntersectionKeyword_1_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//tableOperation += TableOperations
		public Assignment getTableOperationAssignment_3() { return cTableOperationAssignment_3; }
		
		//TableOperations
		public RuleCall getTableOperationTableOperationsParserRuleCall_3_0() { return cTableOperationTableOperationsParserRuleCall_3_0; }
		
		//(',' tableOperation+=TableOperations)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//tableOperation+=TableOperations
		public Assignment getTableOperationAssignment_4_1() { return cTableOperationAssignment_4_1; }
		
		//TableOperations
		public RuleCall getTableOperationTableOperationsParserRuleCall_4_1_0() { return cTableOperationTableOperationsParserRuleCall_4_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class TableOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.TableOperations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperationAlternatives_0_0 = (Alternatives)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationSourceOperationParserRuleCall_0_0_0 = (RuleCall)cOperationAlternatives_0_0.eContents().get(0);
		private final RuleCall cOperationCombinationOperationsParserRuleCall_0_0_1 = (RuleCall)cOperationAlternatives_0_0.eContents().get(1);
		private final Assignment cTransformationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationsTransformOperationParserRuleCall_1_0 = (RuleCall)cTransformationsAssignment_1.eContents().get(0);
		
		//TableOperations:
		//    operation = (SourceOperation | CombinationOperations) (transformations += TransformOperation*)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operation = (SourceOperation | CombinationOperations) (transformations += TransformOperation*)
		public Group getGroup() { return cGroup; }
		
		//operation = (SourceOperation | CombinationOperations)
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//(SourceOperation | CombinationOperations)
		public Alternatives getOperationAlternatives_0_0() { return cOperationAlternatives_0_0; }
		
		//SourceOperation
		public RuleCall getOperationSourceOperationParserRuleCall_0_0_0() { return cOperationSourceOperationParserRuleCall_0_0_0; }
		
		//CombinationOperations
		public RuleCall getOperationCombinationOperationsParserRuleCall_0_0_1() { return cOperationCombinationOperationsParserRuleCall_0_0_1; }
		
		//(transformations += TransformOperation*)
		public Assignment getTransformationsAssignment_1() { return cTransformationsAssignment_1; }
		
		//TransformOperation
		public RuleCall getTransformationsTransformOperationParserRuleCall_1_0() { return cTransformationsTransformOperationParserRuleCall_1_0; }
	}
	public class SelectSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SelectSource");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SelectSource:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class InlineSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.InlineSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceExprSourceParserRuleCall_1_0 = (RuleCall)cSourceExprAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InlineSource:
		//    '('  sourceExpr = Source ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('  sourceExpr = Source ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sourceExpr = Source
		public Assignment getSourceExprAssignment_1() { return cSourceExprAssignment_1; }
		
		//Source
		public RuleCall getSourceExprSourceParserRuleCall_1_0() { return cSourceExprSourceParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SourceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SourceOperation");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSourceAlternatives_0 = (Alternatives)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceSelectSourceParserRuleCall_0_0 = (RuleCall)cSourceAlternatives_0.eContents().get(0);
		private final RuleCall cSourceInlineSourceParserRuleCall_0_1 = (RuleCall)cSourceAlternatives_0.eContents().get(1);
		
		//SourceOperation:
		//    source = (SelectSource | InlineSource )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//source = (SelectSource | InlineSource )
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//(SelectSource | InlineSource )
		public Alternatives getSourceAlternatives_0() { return cSourceAlternatives_0; }
		
		//SelectSource
		public RuleCall getSourceSelectSourceParserRuleCall_0_0() { return cSourceSelectSourceParserRuleCall_0_0; }
		
		//InlineSource
		public RuleCall getSourceInlineSourceParserRuleCall_0_1() { return cSourceInlineSourceParserRuleCall_0_1; }
	}
	public class TransformationTableOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.TransformationTableOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationTransformationParserRuleCall_1_0 = (RuleCall)cTransformationAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TransformationTableOperation:
		//    '('transformation = Transformation')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('transformation = Transformation')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//transformation = Transformation
		public Assignment getTransformationAssignment_1() { return cTransformationAssignment_1; }
		
		//Transformation
		public RuleCall getTransformationTransformationParserRuleCall_1_0() { return cTransformationTransformationParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SelectPipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SelectPipeline");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SelectPipeline:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class InlinePipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.InlinePipeline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPipelineExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPipelineExprPipelineParserRuleCall_1_0 = (RuleCall)cPipelineExprAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InlinePipeline:
		//    '(' pipelineExpr = Pipeline ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' pipelineExpr = Pipeline ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//pipelineExpr = Pipeline
		public Assignment getPipelineExprAssignment_1() { return cPipelineExprAssignment_1; }
		
		//Pipeline
		public RuleCall getPipelineExprPipelineParserRuleCall_1_0() { return cPipelineExprPipelineParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PipelineTableOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.PipelineTableOperation");
		private final Assignment cPipelineAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cPipelineAlternatives_0 = (Alternatives)cPipelineAssignment.eContents().get(0);
		private final RuleCall cPipelineSelectPipelineParserRuleCall_0_0 = (RuleCall)cPipelineAlternatives_0.eContents().get(0);
		private final RuleCall cPipelineInlinePipelineParserRuleCall_0_1 = (RuleCall)cPipelineAlternatives_0.eContents().get(1);
		
		//PipelineTableOperation:
		//    pipeline = (SelectPipeline | InlinePipeline)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pipeline = (SelectPipeline | InlinePipeline)
		public Assignment getPipelineAssignment() { return cPipelineAssignment; }
		
		//(SelectPipeline | InlinePipeline)
		public Alternatives getPipelineAlternatives_0() { return cPipelineAlternatives_0; }
		
		//SelectPipeline
		public RuleCall getPipelineSelectPipelineParserRuleCall_0_0() { return cPipelineSelectPipelineParserRuleCall_0_0; }
		
		//InlinePipeline
		public RuleCall getPipelineInlinePipelineParserRuleCall_0_1() { return cPipelineInlinePipelineParserRuleCall_0_1; }
	}
	public class TransformOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.TransformOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_0 = (Alternatives)cOperationAssignment_1.eContents().get(0);
		private final RuleCall cOperationTransformationTableOperationParserRuleCall_1_0_0 = (RuleCall)cOperationAlternatives_1_0.eContents().get(0);
		private final RuleCall cOperationPipelineTableOperationParserRuleCall_1_0_1 = (RuleCall)cOperationAlternatives_1_0.eContents().get(1);
		
		//TransformOperation:
		//    'apply' operation += ( TransformationTableOperation | PipelineTableOperation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'apply' operation += ( TransformationTableOperation | PipelineTableOperation)
		public Group getGroup() { return cGroup; }
		
		//'apply'
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }
		
		//operation += ( TransformationTableOperation | PipelineTableOperation)
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//( TransformationTableOperation | PipelineTableOperation)
		public Alternatives getOperationAlternatives_1_0() { return cOperationAlternatives_1_0; }
		
		//TransformationTableOperation
		public RuleCall getOperationTransformationTableOperationParserRuleCall_1_0_0() { return cOperationTransformationTableOperationParserRuleCall_1_0_0; }
		
		//PipelineTableOperation
		public RuleCall getOperationPipelineTableOperationParserRuleCall_1_0_1() { return cOperationPipelineTableOperationParserRuleCall_1_0_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationTableOperationsParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Table:
		//    operation = TableOperations
		//    ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operation = TableOperations
		//";"
		public Group getGroup() { return cGroup; }
		
		//operation = TableOperations
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//TableOperations
		public RuleCall getOperationTableOperationsParserRuleCall_0_0() { return cOperationTableOperationsParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class XmlTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.XmlType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXmlTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXmlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cXpathKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPathAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cPathAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//XmlType:
		//    {XmlType} 'xml'( '{' 'xpath' '=' path = STRING ',' "}" )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XmlType} 'xml'( '{' 'xpath' '=' path = STRING ',' "}" )?
		public Group getGroup() { return cGroup; }
		
		//{XmlType}
		public Action getXmlTypeAction_0() { return cXmlTypeAction_0; }
		
		//'xml'
		public Keyword getXmlKeyword_1() { return cXmlKeyword_1; }
		
		//( '{' 'xpath' '=' path = STRING ',' "}" )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//'xpath'
		public Keyword getXpathKeyword_2_1() { return cXpathKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//path = STRING
		public Assignment getPathAssignment_2_3() { return cPathAssignment_2_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_3_0() { return cPathSTRINGTerminalRuleCall_2_3_0; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_5() { return cRightCurlyBracketKeyword_2_5; }
	}
	public class JsonTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.JsonType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJsonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cJsonpathKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPathAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cPathAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//JsonType:
		//        {JsonType} 'json'( '{' 'jsonpath' '=' path = STRING ',' "}" )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonType} 'json'( '{' 'jsonpath' '=' path = STRING ',' "}" )?
		public Group getGroup() { return cGroup; }
		
		//{JsonType}
		public Action getJsonTypeAction_0() { return cJsonTypeAction_0; }
		
		//'json'
		public Keyword getJsonKeyword_1() { return cJsonKeyword_1; }
		
		//( '{' 'jsonpath' '=' path = STRING ',' "}" )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//'jsonpath'
		public Keyword getJsonpathKeyword_2_1() { return cJsonpathKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//path = STRING
		public Assignment getPathAssignment_2_3() { return cPathAssignment_2_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_3_0() { return cPathSTRINGTerminalRuleCall_2_3_0; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_5() { return cRightCurlyBracketKeyword_2_5; }
	}
	public class YamlTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.YamlType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYamlTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cYamlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//YamlType:
		//        {YamlType} 'yaml'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{YamlType} 'yaml'
		public Group getGroup() { return cGroup; }
		
		//{YamlType}
		public Action getYamlTypeAction_0() { return cYamlTypeAction_0; }
		
		//'yaml'
		public Keyword getYamlKeyword_1() { return cYamlKeyword_1; }
	}
	public class CsvTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.CsvType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCsvTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCsvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CsvType:
		//        {CsvType} 'csv'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CsvType} 'csv'
		public Group getGroup() { return cGroup; }
		
		//{CsvType}
		public Action getCsvTypeAction_0() { return cCsvTypeAction_0; }
		
		//'csv'
		public Keyword getCsvKeyword_1() { return cCsvKeyword_1; }
	}
	public class AutoTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.AutoType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAutoTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAutoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AutoType:
		//        {AutoType} 'auto'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AutoType} 'auto'
		public Group getGroup() { return cGroup; }
		
		//{AutoType}
		public Action getAutoTypeAction_0() { return cAutoTypeAction_0; }
		
		//'auto'
		public Keyword getAutoKeyword_1() { return cAutoKeyword_1; }
	}
	public class InputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.InputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXmlTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCsvTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cYamlTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAutoTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//InputType:
		//    JsonType | XmlType | CsvType | YamlType | AutoType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonType | XmlType | CsvType | YamlType | AutoType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonType
		public RuleCall getJsonTypeParserRuleCall_0() { return cJsonTypeParserRuleCall_0; }
		
		//XmlType
		public RuleCall getXmlTypeParserRuleCall_1() { return cXmlTypeParserRuleCall_1; }
		
		//CsvType
		public RuleCall getCsvTypeParserRuleCall_2() { return cCsvTypeParserRuleCall_2; }
		
		//YamlType
		public RuleCall getYamlTypeParserRuleCall_3() { return cYamlTypeParserRuleCall_3; }
		
		//AutoType
		public RuleCall getAutoTypeParserRuleCall_4() { return cAutoTypeParserRuleCall_4; }
	}
	public class HtmlTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.HtmlType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHtmlTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHtmlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cCssKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cCssPathAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cCssPathSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cCssPathAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//HtmlType:
		//    {HtmlType} 'html' ('{''css' '=' cssPath = STRING (',')? '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{HtmlType} 'html' ('{''css' '=' cssPath = STRING (',')? '}')?
		public Group getGroup() { return cGroup; }
		
		//{HtmlType}
		public Action getHtmlTypeAction_0() { return cHtmlTypeAction_0; }
		
		//'html'
		public Keyword getHtmlKeyword_1() { return cHtmlKeyword_1; }
		
		//('{''css' '=' cssPath = STRING (',')? '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//'css'
		public Keyword getCssKeyword_2_1() { return cCssKeyword_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//cssPath = STRING
		public Assignment getCssPathAssignment_2_3() { return cCssPathAssignment_2_3; }
		
		//STRING
		public RuleCall getCssPathSTRINGTerminalRuleCall_2_3_0() { return cCssPathSTRINGTerminalRuleCall_2_3_0; }
		
		//(',')?
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_5() { return cRightCurlyBracketKeyword_2_5; }
	}
	public class OutputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.OutputType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeHtmlTypeParserRuleCall_0_0 = (RuleCall)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeAutoTypeParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final RuleCall cTypeCsvTypeParserRuleCall_0_2 = (RuleCall)cTypeAlternatives_0.eContents().get(2);
		
		//OutputType:
		//    type = (HtmlType | AutoType | CsvType )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = (HtmlType | AutoType | CsvType )
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//(HtmlType | AutoType | CsvType )
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//HtmlType
		public RuleCall getTypeHtmlTypeParserRuleCall_0_0() { return cTypeHtmlTypeParserRuleCall_0_0; }
		
		//AutoType
		public RuleCall getTypeAutoTypeParserRuleCall_0_1() { return cTypeAutoTypeParserRuleCall_0_1; }
		
		//CsvType
		public RuleCall getTypeCsvTypeParserRuleCall_0_2() { return cTypeCsvTypeParserRuleCall_0_2; }
	}
	public class MetaDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.MetaData");
		private final Assignment cMetadataAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cMetadataAlternatives_0 = (Alternatives)cMetadataAssignment.eContents().get(0);
		private final Keyword cMetadataFilepathKeyword_0_0 = (Keyword)cMetadataAlternatives_0.eContents().get(0);
		private final Keyword cMetadataLastmodifiedKeyword_0_1 = (Keyword)cMetadataAlternatives_0.eContents().get(1);
		
		//MetaData:
		//    metadata = ('filepath' | 'lastmodified')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//metadata = ('filepath' | 'lastmodified')
		public Assignment getMetadataAssignment() { return cMetadataAssignment; }
		
		//('filepath' | 'lastmodified')
		public Alternatives getMetadataAlternatives_0() { return cMetadataAlternatives_0; }
		
		//'filepath'
		public Keyword getMetadataFilepathKeyword_0_0() { return cMetadataFilepathKeyword_0_0; }
		
		//'lastmodified'
		public Keyword getMetadataLastmodifiedKeyword_0_1() { return cMetadataLastmodifiedKeyword_0_1; }
	}
	public class SourceStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SourceStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnSTRINGTerminalRuleCall_3_0 = (RuleCall)cColumnAssignment_3.eContents().get(0);
		
		//SourceStore:
		//    'store' metadata=MetaData 'in' column = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'store' metadata=MetaData 'in' column = STRING
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//metadata=MetaData
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_1_0() { return cMetadataMetaDataParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//column = STRING
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_3_0() { return cColumnSTRINGTerminalRuleCall_3_0; }
	}
	public class SourceCoumnSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SourceCoumnSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cColumnAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SourceCoumnSelect:
		//    'select' '[' column += STRING (',' column += STRING)* (',')? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' '[' column += STRING (',' column += STRING)* (',')? ']'
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//column += STRING
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_2_0() { return cColumnSTRINGTerminalRuleCall_2_0; }
		
		//(',' column += STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//column += STRING
		public Assignment getColumnAssignment_3_1() { return cColumnAssignment_3_1; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_3_1_0() { return cColumnSTRINGTerminalRuleCall_3_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuerySTRINGTerminalRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilePathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_3_0 = (RuleCall)cFilePathAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputTypeInputTypeParserRuleCall_4_1_0 = (RuleCall)cInputTypeAssignment_4_1.eContents().get(0);
		private final Assignment cStoreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStoreSourceStoreParserRuleCall_5_0 = (RuleCall)cStoreAssignment_5.eContents().get(0);
		private final Assignment cSelectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSelectSourceCoumnSelectParserRuleCall_6_0 = (RuleCall)cSelectAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Source:
		//    'import' (query=STRING)? 'from' filePath=STRING ('as' inputType=InputType)?
		//    store += SourceStore*
		//    select = (SourceCoumnSelect)?
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (query=STRING)? 'from' filePath=STRING ('as' inputType=InputType)?
		//store += SourceStore*
		//select = (SourceCoumnSelect)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(query=STRING)?
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_1_0() { return cQuerySTRINGTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_3() { return cFilePathAssignment_3; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_3_0() { return cFilePathSTRINGTerminalRuleCall_3_0; }
		
		//('as' inputType=InputType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'as'
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }
		
		//inputType=InputType
		public Assignment getInputTypeAssignment_4_1() { return cInputTypeAssignment_4_1; }
		
		//InputType
		public RuleCall getInputTypeInputTypeParserRuleCall_4_1_0() { return cInputTypeInputTypeParserRuleCall_4_1_0; }
		
		//store += SourceStore*
		public Assignment getStoreAssignment_5() { return cStoreAssignment_5; }
		
		//SourceStore
		public RuleCall getStoreSourceStoreParserRuleCall_5_0() { return cStoreSourceStoreParserRuleCall_5_0; }
		
		//select = (SourceCoumnSelect)?
		public Assignment getSelectAssignment_6() { return cSelectAssignment_6; }
		
		//(SourceCoumnSelect)
		public RuleCall getSelectSourceCoumnSelectParserRuleCall_6_0() { return cSelectSourceCoumnSelectParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class CanonicalizePathTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.CanonicalizePathTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCanonicalizePathTransformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCanonicalizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CanonicalizePathTransformation:
		//    {CanonicalizePathTransformation} 'canonicalize' 'path'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CanonicalizePathTransformation} 'canonicalize' 'path'
		public Group getGroup() { return cGroup; }
		
		//{CanonicalizePathTransformation}
		public Action getCanonicalizePathTransformationAction_0() { return cCanonicalizePathTransformationAction_0; }
		
		//'canonicalize'
		public Keyword getCanonicalizeKeyword_1() { return cCanonicalizeKeyword_1; }
		
		//'path'
		public Keyword getPathKeyword_2() { return cPathKeyword_2; }
	}
	public class GetPathTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.GetPathTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetPathTransformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPathKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GetPathTransformation:
		//    {GetPathTransformation} 'name' 'of' 'path'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GetPathTransformation} 'name' 'of' 'path'
		public Group getGroup() { return cGroup; }
		
		//{GetPathTransformation}
		public Action getGetPathTransformationAction_0() { return cGetPathTransformationAction_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'path'
		public Keyword getPathKeyword_3() { return cPathKeyword_3; }
	}
	public class AppendPathTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.AppendPathTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		//AppendPathTransformation:
		//    'append' 'path' path = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'append' 'path' path = STRING
		public Group getGroup() { return cGroup; }
		
		//'append'
		public Keyword getAppendKeyword_0() { return cAppendKeyword_0; }
		
		//'path'
		public Keyword getPathKeyword_1() { return cPathKeyword_1; }
		
		//path = STRING
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_0() { return cPathSTRINGTerminalRuleCall_2_0; }
	}
	public class PathTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.PathTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperationAlternatives_0_0 = (Alternatives)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationAppendPathTransformationParserRuleCall_0_0_0 = (RuleCall)cOperationAlternatives_0_0.eContents().get(0);
		private final RuleCall cOperationCanonicalizePathTransformationParserRuleCall_0_0_1 = (RuleCall)cOperationAlternatives_0_0.eContents().get(1);
		private final RuleCall cOperationGetPathTransformationParserRuleCall_0_0_2 = (RuleCall)cOperationAlternatives_0_0.eContents().get(2);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		
		//PathTransformation:
		//    operation = (AppendPathTransformation | CanonicalizePathTransformation | GetPathTransformation) 'in' column = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operation = (AppendPathTransformation | CanonicalizePathTransformation | GetPathTransformation) 'in' column = STRING
		public Group getGroup() { return cGroup; }
		
		//operation = (AppendPathTransformation | CanonicalizePathTransformation | GetPathTransformation)
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//(AppendPathTransformation | CanonicalizePathTransformation | GetPathTransformation)
		public Alternatives getOperationAlternatives_0_0() { return cOperationAlternatives_0_0; }
		
		//AppendPathTransformation
		public RuleCall getOperationAppendPathTransformationParserRuleCall_0_0_0() { return cOperationAppendPathTransformationParserRuleCall_0_0_0; }
		
		//CanonicalizePathTransformation
		public RuleCall getOperationCanonicalizePathTransformationParserRuleCall_0_0_1() { return cOperationCanonicalizePathTransformationParserRuleCall_0_0_1; }
		
		//GetPathTransformation
		public RuleCall getOperationGetPathTransformationParserRuleCall_0_0_2() { return cOperationGetPathTransformationParserRuleCall_0_0_2; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//column = STRING
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_2_0() { return cColumnSTRINGTerminalRuleCall_2_0; }
	}
	public class FoldAverageTranformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.FoldAverageTranformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFoldAverageTranformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFoldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAverageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FoldAverageTranformation:
		//    {FoldAverageTranformation} 'fold' 'average'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FoldAverageTranformation} 'fold' 'average'
		public Group getGroup() { return cGroup; }
		
		//{FoldAverageTranformation}
		public Action getFoldAverageTranformationAction_0() { return cFoldAverageTranformationAction_0; }
		
		//'fold'
		public Keyword getFoldKeyword_1() { return cFoldKeyword_1; }
		
		//'average'
		public Keyword getAverageKeyword_2() { return cAverageKeyword_2; }
	}
	public class FoldSumTranformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.FoldSumTranformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFoldSumTranformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFoldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FoldSumTranformation:
		//    {FoldSumTranformation} 'fold' 'sum'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FoldSumTranformation} 'fold' 'sum'
		public Group getGroup() { return cGroup; }
		
		//{FoldSumTranformation}
		public Action getFoldSumTranformationAction_0() { return cFoldSumTranformationAction_0; }
		
		//'fold'
		public Keyword getFoldKeyword_1() { return cFoldKeyword_1; }
		
		//'sum'
		public Keyword getSumKeyword_2() { return cSumKeyword_2; }
	}
	public class GroupByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.GroupBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		
		//GroupBy:
		//    'group' 'by' column = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'group' 'by' column = STRING
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//column = STRING
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_2_0() { return cColumnSTRINGTerminalRuleCall_2_0; }
	}
	public class FoldTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.FoldTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperationAlternatives_0_0 = (Alternatives)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationFoldSumTranformationParserRuleCall_0_0_0 = (RuleCall)cOperationAlternatives_0_0.eContents().get(0);
		private final RuleCall cOperationFoldAverageTranformationParserRuleCall_0_0_1 = (RuleCall)cOperationAlternatives_0_0.eContents().get(1);
		private final Assignment cGroupByAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupByGroupByParserRuleCall_1_0 = (RuleCall)cGroupByAssignment_1.eContents().get(0);
		
		//FoldTransformation:
		//    operation = (FoldSumTranformation | FoldAverageTranformation) groupBy = GroupBy?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operation = (FoldSumTranformation | FoldAverageTranformation) groupBy = GroupBy?
		public Group getGroup() { return cGroup; }
		
		//operation = (FoldSumTranformation | FoldAverageTranformation)
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//(FoldSumTranformation | FoldAverageTranformation)
		public Alternatives getOperationAlternatives_0_0() { return cOperationAlternatives_0_0; }
		
		//FoldSumTranformation
		public RuleCall getOperationFoldSumTranformationParserRuleCall_0_0_0() { return cOperationFoldSumTranformationParserRuleCall_0_0_0; }
		
		//FoldAverageTranformation
		public RuleCall getOperationFoldAverageTranformationParserRuleCall_0_0_1() { return cOperationFoldAverageTranformationParserRuleCall_0_0_1; }
		
		//groupBy = GroupBy?
		public Assignment getGroupByAssignment_1() { return cGroupByAssignment_1; }
		
		//GroupBy
		public RuleCall getGroupByGroupByParserRuleCall_1_0() { return cGroupByGroupByParserRuleCall_1_0; }
	}
	public class AddColumnTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.AddColumnTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnSTRINGTerminalRuleCall_1_0 = (RuleCall)cColumnAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AddColumnTransformation:
		//    'add' column = STRING 'with' value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' column = STRING 'with' value = STRING
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//column = STRING
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_1_0() { return cColumnSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//value = STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class RemoveColumnTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.RemoveColumnTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cColumnAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RemoveColumnTransformation:
		//    'remove' '[' column += STRING (',' column += STRING)* (',')? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' '[' column += STRING (',' column += STRING)* (',')? ']'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//column += STRING
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_2_0() { return cColumnSTRINGTerminalRuleCall_2_0; }
		
		//(',' column += STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//column += STRING
		public Assignment getColumnAssignment_3_1() { return cColumnAssignment_3_1; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_3_1_0() { return cColumnSTRINGTerminalRuleCall_3_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class RenameColumnTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.RenameColumnTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRegexRegexKeyword_1_0 = (Keyword)cRegexAssignment_1.eContents().get(0);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromSTRINGTerminalRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToSTRINGTerminalRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		
		//RenameColumnTransformation:
		//    'rename' (regex = 'regex')? from = STRING 'to' to = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rename' (regex = 'regex')? from = STRING 'to' to = STRING
		public Group getGroup() { return cGroup; }
		
		//'rename'
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//(regex = 'regex')?
		public Assignment getRegexAssignment_1() { return cRegexAssignment_1; }
		
		//'regex'
		public Keyword getRegexRegexKeyword_1_0() { return cRegexRegexKeyword_1_0; }
		
		//from = STRING
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//STRING
		public RuleCall getFromSTRINGTerminalRuleCall_2_0() { return cFromSTRINGTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//to = STRING
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_4_0() { return cToSTRINGTerminalRuleCall_4_0; }
	}
	public class SelectColumnTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SelectColumnTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cColumnAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelectColumnTransformation:
		//    'select' '[' column += STRING (',' column += STRING)* (',')? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' '[' column += STRING (',' column += STRING)* (',')? ']'
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//column += STRING
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_2_0() { return cColumnSTRINGTerminalRuleCall_2_0; }
		
		//(',' column += STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//column += STRING
		public Assignment getColumnAssignment_3_1() { return cColumnAssignment_3_1; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_3_1_0() { return cColumnSTRINGTerminalRuleCall_3_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class ColumnTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.ColumnTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddColumnTransformationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveColumnTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRenameColumnTransformationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectColumnTransformationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ColumnTransformation:
		//    (AddColumnTransformation | RemoveColumnTransformation | RenameColumnTransformation | SelectColumnTransformation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(AddColumnTransformation | RemoveColumnTransformation | RenameColumnTransformation | SelectColumnTransformation)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddColumnTransformation
		public RuleCall getAddColumnTransformationParserRuleCall_0() { return cAddColumnTransformationParserRuleCall_0; }
		
		//RemoveColumnTransformation
		public RuleCall getRemoveColumnTransformationParserRuleCall_1() { return cRemoveColumnTransformationParserRuleCall_1; }
		
		//RenameColumnTransformation
		public RuleCall getRenameColumnTransformationParserRuleCall_2() { return cRenameColumnTransformationParserRuleCall_2; }
		
		//SelectColumnTransformation
		public RuleCall getSelectColumnTransformationParserRuleCall_3() { return cSelectColumnTransformationParserRuleCall_3; }
	}
	public class RoundCellsTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.RoundCellsTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDigitsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDigitsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDigitsINTTerminalRuleCall_7_0 = (RuleCall)cDigitsAssignment_7.eContents().get(0);
		
		//RoundCellsTransformation:
		//    'round' '[' columns += STRING (',' (columns += STRING))* (',')? ']' 'digits' digits = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'round' '[' columns += STRING (',' (columns += STRING))* (',')? ']' 'digits' digits = INT
		public Group getGroup() { return cGroup; }
		
		//'round'
		public Keyword getRoundKeyword_0() { return cRoundKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//columns += STRING
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_2_0() { return cColumnsSTRINGTerminalRuleCall_2_0; }
		
		//(',' (columns += STRING))*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//(columns += STRING)
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_3_1_0() { return cColumnsSTRINGTerminalRuleCall_3_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//'digits'
		public Keyword getDigitsKeyword_6() { return cDigitsKeyword_6; }
		
		//digits = INT
		public Assignment getDigitsAssignment_7() { return cDigitsAssignment_7; }
		
		//INT
		public RuleCall getDigitsINTTerminalRuleCall_7_0() { return cDigitsINTTerminalRuleCall_7_0; }
	}
	public class SetCellsTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SetCellsTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColumnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnSTRINGTerminalRuleCall_5_0 = (RuleCall)cColumnAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAtKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRowKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRowAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRowSTRINGTerminalRuleCall_6_2_0 = (RuleCall)cRowAssignment_6_2.eContents().get(0);
		
		//SetCellsTransformation:
		//    'set''value' value = STRING 'at' 'column' column= STRING ('at' 'row' row=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set''value' value = STRING 'at' 'column' column= STRING ('at' 'row' row=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//value = STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//'column'
		public Keyword getColumnKeyword_4() { return cColumnKeyword_4; }
		
		//column= STRING
		public Assignment getColumnAssignment_5() { return cColumnAssignment_5; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_5_0() { return cColumnSTRINGTerminalRuleCall_5_0; }
		
		//('at' 'row' row=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'at'
		public Keyword getAtKeyword_6_0() { return cAtKeyword_6_0; }
		
		//'row'
		public Keyword getRowKeyword_6_1() { return cRowKeyword_6_1; }
		
		//row=STRING
		public Assignment getRowAssignment_6_2() { return cRowAssignment_6_2; }
		
		//STRING
		public RuleCall getRowSTRINGTerminalRuleCall_6_2_0() { return cRowSTRINGTerminalRuleCall_6_2_0; }
	}
	public class CellTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.CellTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoundCellsTransformationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetCellsTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CellTransformation:
		//    RoundCellsTransformation | SetCellsTransformation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RoundCellsTransformation | SetCellsTransformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RoundCellsTransformation
		public RuleCall getRoundCellsTransformationParserRuleCall_0() { return cRoundCellsTransformationParserRuleCall_0; }
		
		//SetCellsTransformation
		public RuleCall getSetCellsTransformationParserRuleCall_1() { return cSetCellsTransformationParserRuleCall_1; }
	}
	public class SelectRowsTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SelectRowsTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartINTTerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSkipKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLengthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_2_1_0 = (RuleCall)cLengthAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGroupbyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupByAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupBySTRINGTerminalRuleCall_3_1_0 = (RuleCall)cGroupByAssignment_3_1.eContents().get(0);
		
		//SelectRowsTransformation:
		//    'select' start = INT ('skip' length = INT)? ('groupby' groupBy= STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' start = INT ('skip' length = INT)? ('groupby' groupBy= STRING)?
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//start = INT
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_1_0() { return cStartINTTerminalRuleCall_1_0; }
		
		//('skip' length = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'skip'
		public Keyword getSkipKeyword_2_0() { return cSkipKeyword_2_0; }
		
		//length = INT
		public Assignment getLengthAssignment_2_1() { return cLengthAssignment_2_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_1_0() { return cLengthINTTerminalRuleCall_2_1_0; }
		
		//('groupby' groupBy= STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'groupby'
		public Keyword getGroupbyKeyword_3_0() { return cGroupbyKeyword_3_0; }
		
		//groupBy= STRING
		public Assignment getGroupByAssignment_3_1() { return cGroupByAssignment_3_1; }
		
		//STRING
		public RuleCall getGroupBySTRINGTerminalRuleCall_3_1_0() { return cGroupBySTRINGTerminalRuleCall_3_1_0; }
	}
	public class SortRowsTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.SortRowsTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cColumnsAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOrderAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cOrderAlternatives_7_0 = (Alternatives)cOrderAssignment_7.eContents().get(0);
		private final Keyword cOrderDescendingKeyword_7_0_0 = (Keyword)cOrderAlternatives_7_0.eContents().get(0);
		private final Keyword cOrderAscendingKeyword_7_0_1 = (Keyword)cOrderAlternatives_7_0.eContents().get(1);
		
		//SortRowsTransformation:
		//    'sort' 'by' '[' columns += STRING (',' columns += STRING)* (',')? ']' (order = ('descending' | 'ascending'))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sort' 'by' '[' columns += STRING (',' columns += STRING)* (',')? ']' (order = ('descending' | 'ascending'))?
		public Group getGroup() { return cGroup; }
		
		//'sort'
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//columns += STRING
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_3_0() { return cColumnsSTRINGTerminalRuleCall_3_0; }
		
		//(',' columns += STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columns += STRING
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_4_1_0() { return cColumnsSTRINGTerminalRuleCall_4_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//(order = ('descending' | 'ascending'))?
		public Assignment getOrderAssignment_7() { return cOrderAssignment_7; }
		
		//('descending' | 'ascending')
		public Alternatives getOrderAlternatives_7_0() { return cOrderAlternatives_7_0; }
		
		//'descending'
		public Keyword getOrderDescendingKeyword_7_0_0() { return cOrderDescendingKeyword_7_0_0; }
		
		//'ascending'
		public Keyword getOrderAscendingKeyword_7_0_1() { return cOrderAscendingKeyword_7_0_1; }
	}
	public class RowTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.RowTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSortRowsTransformationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectRowsTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RowTransformation:
		//    SortRowsTransformation | SelectRowsTransformation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SortRowsTransformation | SelectRowsTransformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SortRowsTransformation
		public RuleCall getSortRowsTransformationParserRuleCall_0() { return cSortRowsTransformationParserRuleCall_0; }
		
		//SelectRowsTransformation
		public RuleCall getSelectRowsTransformationParserRuleCall_1() { return cSelectRowsTransformationParserRuleCall_1; }
	}
	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Transformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPathTransformationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFoldTransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColumnTransformationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCellTransformationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRowTransformationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Transformation:
		//    (PathTransformation | FoldTransformation | ColumnTransformation | CellTransformation | RowTransformation)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(PathTransformation | FoldTransformation | ColumnTransformation | CellTransformation | RowTransformation)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PathTransformation
		public RuleCall getPathTransformationParserRuleCall_0() { return cPathTransformationParserRuleCall_0; }
		
		//FoldTransformation
		public RuleCall getFoldTransformationParserRuleCall_1() { return cFoldTransformationParserRuleCall_1; }
		
		//ColumnTransformation
		public RuleCall getColumnTransformationParserRuleCall_2() { return cColumnTransformationParserRuleCall_2; }
		
		//CellTransformation
		public RuleCall getCellTransformationParserRuleCall_3() { return cCellTransformationParserRuleCall_3; }
		
		//RowTransformation
		public RuleCall getRowTransformationParserRuleCall_4() { return cRowTransformationParserRuleCall_4; }
	}
	public class PipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Pipeline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPipeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTransformationAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTransformationTransformationParserRuleCall_2_0_0 = (RuleCall)cTransformationAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTransformationAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTransformationTransformationParserRuleCall_2_1_1_0 = (RuleCall)cTransformationAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pipeline:
		//    'pipe' '['
		//        (transformation += Transformation (',' transformation += Transformation )* (',')?)
		//    ']'';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'pipe' '['
		//    (transformation += Transformation (',' transformation += Transformation )* (',')?)
		//']'';'
		public Group getGroup() { return cGroup; }
		
		//'pipe'
		public Keyword getPipeKeyword_0() { return cPipeKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(transformation += Transformation (',' transformation += Transformation )* (',')?)
		public Group getGroup_2() { return cGroup_2; }
		
		//transformation += Transformation
		public Assignment getTransformationAssignment_2_0() { return cTransformationAssignment_2_0; }
		
		//Transformation
		public RuleCall getTransformationTransformationParserRuleCall_2_0_0() { return cTransformationTransformationParserRuleCall_2_0_0; }
		
		//(',' transformation += Transformation )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//transformation += Transformation
		public Assignment getTransformationAssignment_2_1_1() { return cTransformationAssignment_2_1_1; }
		
		//Transformation
		public RuleCall getTransformationTransformationParserRuleCall_2_1_1_0() { return cTransformationTransformationParserRuleCall_2_1_1_0; }
		
		//(',')?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.up.fe.els2023.Dsl.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTableIDTerminalRuleCall_1_0 = (RuleCall)cTableAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputOutputTypeParserRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Export:
		//    'export' table=ID 'to' path = STRING 'as' output = OutputType ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'export' table=ID 'to' path = STRING 'as' output = OutputType ';'
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//table=ID
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//ID
		public RuleCall getTableIDTerminalRuleCall_1_0() { return cTableIDTerminalRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//path = STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//'as'
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//output = OutputType
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }
		
		//OutputType
		public RuleCall getOutputOutputTypeParserRuleCall_5_0() { return cOutputOutputTypeParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	
	
	private final MyDslElements pMyDsl;
	private final AssignmentElements pAssignment;
	private final CombinationOperationsElements pCombinationOperations;
	private final TableOperationsElements pTableOperations;
	private final SelectSourceElements pSelectSource;
	private final InlineSourceElements pInlineSource;
	private final SourceOperationElements pSourceOperation;
	private final TransformationTableOperationElements pTransformationTableOperation;
	private final SelectPipelineElements pSelectPipeline;
	private final InlinePipelineElements pInlinePipeline;
	private final PipelineTableOperationElements pPipelineTableOperation;
	private final TransformOperationElements pTransformOperation;
	private final TableElements pTable;
	private final XmlTypeElements pXmlType;
	private final JsonTypeElements pJsonType;
	private final YamlTypeElements pYamlType;
	private final CsvTypeElements pCsvType;
	private final AutoTypeElements pAutoType;
	private final InputTypeElements pInputType;
	private final HtmlTypeElements pHtmlType;
	private final OutputTypeElements pOutputType;
	private final MetaDataElements pMetaData;
	private final SourceStoreElements pSourceStore;
	private final SourceCoumnSelectElements pSourceCoumnSelect;
	private final SourceElements pSource;
	private final CanonicalizePathTransformationElements pCanonicalizePathTransformation;
	private final GetPathTransformationElements pGetPathTransformation;
	private final AppendPathTransformationElements pAppendPathTransformation;
	private final PathTransformationElements pPathTransformation;
	private final FoldAverageTranformationElements pFoldAverageTranformation;
	private final FoldSumTranformationElements pFoldSumTranformation;
	private final GroupByElements pGroupBy;
	private final FoldTransformationElements pFoldTransformation;
	private final AddColumnTransformationElements pAddColumnTransformation;
	private final RemoveColumnTransformationElements pRemoveColumnTransformation;
	private final RenameColumnTransformationElements pRenameColumnTransformation;
	private final SelectColumnTransformationElements pSelectColumnTransformation;
	private final ColumnTransformationElements pColumnTransformation;
	private final RoundCellsTransformationElements pRoundCellsTransformation;
	private final SetCellsTransformationElements pSetCellsTransformation;
	private final CellTransformationElements pCellTransformation;
	private final SelectRowsTransformationElements pSelectRowsTransformation;
	private final SortRowsTransformationElements pSortRowsTransformation;
	private final RowTransformationElements pRowTransformation;
	private final TransformationElements pTransformation;
	private final PipelineElements pPipeline;
	private final ExportElements pExport;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMyDsl = new MyDslElements();
		this.pAssignment = new AssignmentElements();
		this.pCombinationOperations = new CombinationOperationsElements();
		this.pTableOperations = new TableOperationsElements();
		this.pSelectSource = new SelectSourceElements();
		this.pInlineSource = new InlineSourceElements();
		this.pSourceOperation = new SourceOperationElements();
		this.pTransformationTableOperation = new TransformationTableOperationElements();
		this.pSelectPipeline = new SelectPipelineElements();
		this.pInlinePipeline = new InlinePipelineElements();
		this.pPipelineTableOperation = new PipelineTableOperationElements();
		this.pTransformOperation = new TransformOperationElements();
		this.pTable = new TableElements();
		this.pXmlType = new XmlTypeElements();
		this.pJsonType = new JsonTypeElements();
		this.pYamlType = new YamlTypeElements();
		this.pCsvType = new CsvTypeElements();
		this.pAutoType = new AutoTypeElements();
		this.pInputType = new InputTypeElements();
		this.pHtmlType = new HtmlTypeElements();
		this.pOutputType = new OutputTypeElements();
		this.pMetaData = new MetaDataElements();
		this.pSourceStore = new SourceStoreElements();
		this.pSourceCoumnSelect = new SourceCoumnSelectElements();
		this.pSource = new SourceElements();
		this.pCanonicalizePathTransformation = new CanonicalizePathTransformationElements();
		this.pGetPathTransformation = new GetPathTransformationElements();
		this.pAppendPathTransformation = new AppendPathTransformationElements();
		this.pPathTransformation = new PathTransformationElements();
		this.pFoldAverageTranformation = new FoldAverageTranformationElements();
		this.pFoldSumTranformation = new FoldSumTranformationElements();
		this.pGroupBy = new GroupByElements();
		this.pFoldTransformation = new FoldTransformationElements();
		this.pAddColumnTransformation = new AddColumnTransformationElements();
		this.pRemoveColumnTransformation = new RemoveColumnTransformationElements();
		this.pRenameColumnTransformation = new RenameColumnTransformationElements();
		this.pSelectColumnTransformation = new SelectColumnTransformationElements();
		this.pColumnTransformation = new ColumnTransformationElements();
		this.pRoundCellsTransformation = new RoundCellsTransformationElements();
		this.pSetCellsTransformation = new SetCellsTransformationElements();
		this.pCellTransformation = new CellTransformationElements();
		this.pSelectRowsTransformation = new SelectRowsTransformationElements();
		this.pSortRowsTransformation = new SortRowsTransformationElements();
		this.pRowTransformation = new RowTransformationElements();
		this.pTransformation = new TransformationElements();
		this.pPipeline = new PipelineElements();
		this.pExport = new ExportElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pt.up.fe.els2023.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MyDsl:
	//    assignment += Assignment*
	//    export += Export*
	//;
	public MyDslElements getMyDslAccess() {
		return pMyDsl;
	}
	
	public ParserRule getMyDslRule() {
		return getMyDslAccess().getRule();
	}
	
	//Assignment:
	//    name = ID '=' expression=(Pipeline|Source|Table)
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//CombinationOperations:
	//    operation = ('merge' | 'append') type = ("union" | "intersection")?  "["
	//        tableOperation += TableOperations (',' tableOperation+=TableOperations)* (',')?
	//    "]"
	//;
	public CombinationOperationsElements getCombinationOperationsAccess() {
		return pCombinationOperations;
	}
	
	public ParserRule getCombinationOperationsRule() {
		return getCombinationOperationsAccess().getRule();
	}
	
	//TableOperations:
	//    operation = (SourceOperation | CombinationOperations) (transformations += TransformOperation*)
	//;
	public TableOperationsElements getTableOperationsAccess() {
		return pTableOperations;
	}
	
	public ParserRule getTableOperationsRule() {
		return getTableOperationsAccess().getRule();
	}
	
	//SelectSource:
	//    name = ID
	//;
	public SelectSourceElements getSelectSourceAccess() {
		return pSelectSource;
	}
	
	public ParserRule getSelectSourceRule() {
		return getSelectSourceAccess().getRule();
	}
	
	//InlineSource:
	//    '('  sourceExpr = Source ')'
	//;
	public InlineSourceElements getInlineSourceAccess() {
		return pInlineSource;
	}
	
	public ParserRule getInlineSourceRule() {
		return getInlineSourceAccess().getRule();
	}
	
	//SourceOperation:
	//    source = (SelectSource | InlineSource )
	//;
	public SourceOperationElements getSourceOperationAccess() {
		return pSourceOperation;
	}
	
	public ParserRule getSourceOperationRule() {
		return getSourceOperationAccess().getRule();
	}
	
	//TransformationTableOperation:
	//    '('transformation = Transformation')'
	//;
	public TransformationTableOperationElements getTransformationTableOperationAccess() {
		return pTransformationTableOperation;
	}
	
	public ParserRule getTransformationTableOperationRule() {
		return getTransformationTableOperationAccess().getRule();
	}
	
	//SelectPipeline:
	//    name = ID
	//;
	public SelectPipelineElements getSelectPipelineAccess() {
		return pSelectPipeline;
	}
	
	public ParserRule getSelectPipelineRule() {
		return getSelectPipelineAccess().getRule();
	}
	
	//InlinePipeline:
	//    '(' pipelineExpr = Pipeline ')'
	//;
	public InlinePipelineElements getInlinePipelineAccess() {
		return pInlinePipeline;
	}
	
	public ParserRule getInlinePipelineRule() {
		return getInlinePipelineAccess().getRule();
	}
	
	//PipelineTableOperation:
	//    pipeline = (SelectPipeline | InlinePipeline)
	//;
	public PipelineTableOperationElements getPipelineTableOperationAccess() {
		return pPipelineTableOperation;
	}
	
	public ParserRule getPipelineTableOperationRule() {
		return getPipelineTableOperationAccess().getRule();
	}
	
	//TransformOperation:
	//    'apply' operation += ( TransformationTableOperation | PipelineTableOperation)
	//;
	public TransformOperationElements getTransformOperationAccess() {
		return pTransformOperation;
	}
	
	public ParserRule getTransformOperationRule() {
		return getTransformOperationAccess().getRule();
	}
	
	//Table:
	//    operation = TableOperations
	//    ";"
	//;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//XmlType:
	//    {XmlType} 'xml'( '{' 'xpath' '=' path = STRING ',' "}" )?
	//;
	public XmlTypeElements getXmlTypeAccess() {
		return pXmlType;
	}
	
	public ParserRule getXmlTypeRule() {
		return getXmlTypeAccess().getRule();
	}
	
	//JsonType:
	//        {JsonType} 'json'( '{' 'jsonpath' '=' path = STRING ',' "}" )?
	//;
	public JsonTypeElements getJsonTypeAccess() {
		return pJsonType;
	}
	
	public ParserRule getJsonTypeRule() {
		return getJsonTypeAccess().getRule();
	}
	
	//YamlType:
	//        {YamlType} 'yaml'
	//;
	public YamlTypeElements getYamlTypeAccess() {
		return pYamlType;
	}
	
	public ParserRule getYamlTypeRule() {
		return getYamlTypeAccess().getRule();
	}
	
	//CsvType:
	//        {CsvType} 'csv'
	//;
	public CsvTypeElements getCsvTypeAccess() {
		return pCsvType;
	}
	
	public ParserRule getCsvTypeRule() {
		return getCsvTypeAccess().getRule();
	}
	
	//AutoType:
	//        {AutoType} 'auto'
	//;
	public AutoTypeElements getAutoTypeAccess() {
		return pAutoType;
	}
	
	public ParserRule getAutoTypeRule() {
		return getAutoTypeAccess().getRule();
	}
	
	//InputType:
	//    JsonType | XmlType | CsvType | YamlType | AutoType
	//;
	public InputTypeElements getInputTypeAccess() {
		return pInputType;
	}
	
	public ParserRule getInputTypeRule() {
		return getInputTypeAccess().getRule();
	}
	
	//HtmlType:
	//    {HtmlType} 'html' ('{''css' '=' cssPath = STRING (',')? '}')?
	//;
	public HtmlTypeElements getHtmlTypeAccess() {
		return pHtmlType;
	}
	
	public ParserRule getHtmlTypeRule() {
		return getHtmlTypeAccess().getRule();
	}
	
	//OutputType:
	//    type = (HtmlType | AutoType | CsvType )
	//;
	public OutputTypeElements getOutputTypeAccess() {
		return pOutputType;
	}
	
	public ParserRule getOutputTypeRule() {
		return getOutputTypeAccess().getRule();
	}
	
	//MetaData:
	//    metadata = ('filepath' | 'lastmodified')
	//;
	public MetaDataElements getMetaDataAccess() {
		return pMetaData;
	}
	
	public ParserRule getMetaDataRule() {
		return getMetaDataAccess().getRule();
	}
	
	//SourceStore:
	//    'store' metadata=MetaData 'in' column = STRING
	//;
	public SourceStoreElements getSourceStoreAccess() {
		return pSourceStore;
	}
	
	public ParserRule getSourceStoreRule() {
		return getSourceStoreAccess().getRule();
	}
	
	//SourceCoumnSelect:
	//    'select' '[' column += STRING (',' column += STRING)* (',')? ']'
	//;
	public SourceCoumnSelectElements getSourceCoumnSelectAccess() {
		return pSourceCoumnSelect;
	}
	
	public ParserRule getSourceCoumnSelectRule() {
		return getSourceCoumnSelectAccess().getRule();
	}
	
	//Source:
	//    'import' (query=STRING)? 'from' filePath=STRING ('as' inputType=InputType)?
	//    store += SourceStore*
	//    select = (SourceCoumnSelect)?
	//    ';'
	//;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//CanonicalizePathTransformation:
	//    {CanonicalizePathTransformation} 'canonicalize' 'path'
	//;
	public CanonicalizePathTransformationElements getCanonicalizePathTransformationAccess() {
		return pCanonicalizePathTransformation;
	}
	
	public ParserRule getCanonicalizePathTransformationRule() {
		return getCanonicalizePathTransformationAccess().getRule();
	}
	
	//GetPathTransformation:
	//    {GetPathTransformation} 'name' 'of' 'path'
	//;
	public GetPathTransformationElements getGetPathTransformationAccess() {
		return pGetPathTransformation;
	}
	
	public ParserRule getGetPathTransformationRule() {
		return getGetPathTransformationAccess().getRule();
	}
	
	//AppendPathTransformation:
	//    'append' 'path' path = STRING
	//;
	public AppendPathTransformationElements getAppendPathTransformationAccess() {
		return pAppendPathTransformation;
	}
	
	public ParserRule getAppendPathTransformationRule() {
		return getAppendPathTransformationAccess().getRule();
	}
	
	//PathTransformation:
	//    operation = (AppendPathTransformation | CanonicalizePathTransformation | GetPathTransformation) 'in' column = STRING
	//;
	public PathTransformationElements getPathTransformationAccess() {
		return pPathTransformation;
	}
	
	public ParserRule getPathTransformationRule() {
		return getPathTransformationAccess().getRule();
	}
	
	//FoldAverageTranformation:
	//    {FoldAverageTranformation} 'fold' 'average'
	//;
	public FoldAverageTranformationElements getFoldAverageTranformationAccess() {
		return pFoldAverageTranformation;
	}
	
	public ParserRule getFoldAverageTranformationRule() {
		return getFoldAverageTranformationAccess().getRule();
	}
	
	//FoldSumTranformation:
	//    {FoldSumTranformation} 'fold' 'sum'
	//;
	public FoldSumTranformationElements getFoldSumTranformationAccess() {
		return pFoldSumTranformation;
	}
	
	public ParserRule getFoldSumTranformationRule() {
		return getFoldSumTranformationAccess().getRule();
	}
	
	//GroupBy:
	//    'group' 'by' column = STRING
	//;
	public GroupByElements getGroupByAccess() {
		return pGroupBy;
	}
	
	public ParserRule getGroupByRule() {
		return getGroupByAccess().getRule();
	}
	
	//FoldTransformation:
	//    operation = (FoldSumTranformation | FoldAverageTranformation) groupBy = GroupBy?
	//;
	public FoldTransformationElements getFoldTransformationAccess() {
		return pFoldTransformation;
	}
	
	public ParserRule getFoldTransformationRule() {
		return getFoldTransformationAccess().getRule();
	}
	
	//AddColumnTransformation:
	//    'add' column = STRING 'with' value = STRING
	//;
	public AddColumnTransformationElements getAddColumnTransformationAccess() {
		return pAddColumnTransformation;
	}
	
	public ParserRule getAddColumnTransformationRule() {
		return getAddColumnTransformationAccess().getRule();
	}
	
	//RemoveColumnTransformation:
	//    'remove' '[' column += STRING (',' column += STRING)* (',')? ']'
	//;
	public RemoveColumnTransformationElements getRemoveColumnTransformationAccess() {
		return pRemoveColumnTransformation;
	}
	
	public ParserRule getRemoveColumnTransformationRule() {
		return getRemoveColumnTransformationAccess().getRule();
	}
	
	//RenameColumnTransformation:
	//    'rename' (regex = 'regex')? from = STRING 'to' to = STRING
	//;
	public RenameColumnTransformationElements getRenameColumnTransformationAccess() {
		return pRenameColumnTransformation;
	}
	
	public ParserRule getRenameColumnTransformationRule() {
		return getRenameColumnTransformationAccess().getRule();
	}
	
	//SelectColumnTransformation:
	//    'select' '[' column += STRING (',' column += STRING)* (',')? ']'
	//;
	public SelectColumnTransformationElements getSelectColumnTransformationAccess() {
		return pSelectColumnTransformation;
	}
	
	public ParserRule getSelectColumnTransformationRule() {
		return getSelectColumnTransformationAccess().getRule();
	}
	
	//ColumnTransformation:
	//    (AddColumnTransformation | RemoveColumnTransformation | RenameColumnTransformation | SelectColumnTransformation)
	//;
	public ColumnTransformationElements getColumnTransformationAccess() {
		return pColumnTransformation;
	}
	
	public ParserRule getColumnTransformationRule() {
		return getColumnTransformationAccess().getRule();
	}
	
	//RoundCellsTransformation:
	//    'round' '[' columns += STRING (',' (columns += STRING))* (',')? ']' 'digits' digits = INT
	//;
	public RoundCellsTransformationElements getRoundCellsTransformationAccess() {
		return pRoundCellsTransformation;
	}
	
	public ParserRule getRoundCellsTransformationRule() {
		return getRoundCellsTransformationAccess().getRule();
	}
	
	//SetCellsTransformation:
	//    'set''value' value = STRING 'at' 'column' column= STRING ('at' 'row' row=STRING)?
	//;
	public SetCellsTransformationElements getSetCellsTransformationAccess() {
		return pSetCellsTransformation;
	}
	
	public ParserRule getSetCellsTransformationRule() {
		return getSetCellsTransformationAccess().getRule();
	}
	
	//CellTransformation:
	//    RoundCellsTransformation | SetCellsTransformation
	//;
	public CellTransformationElements getCellTransformationAccess() {
		return pCellTransformation;
	}
	
	public ParserRule getCellTransformationRule() {
		return getCellTransformationAccess().getRule();
	}
	
	//SelectRowsTransformation:
	//    'select' start = INT ('skip' length = INT)? ('groupby' groupBy= STRING)?
	//;
	public SelectRowsTransformationElements getSelectRowsTransformationAccess() {
		return pSelectRowsTransformation;
	}
	
	public ParserRule getSelectRowsTransformationRule() {
		return getSelectRowsTransformationAccess().getRule();
	}
	
	//SortRowsTransformation:
	//    'sort' 'by' '[' columns += STRING (',' columns += STRING)* (',')? ']' (order = ('descending' | 'ascending'))?
	//;
	public SortRowsTransformationElements getSortRowsTransformationAccess() {
		return pSortRowsTransformation;
	}
	
	public ParserRule getSortRowsTransformationRule() {
		return getSortRowsTransformationAccess().getRule();
	}
	
	//RowTransformation:
	//    SortRowsTransformation | SelectRowsTransformation
	//;
	public RowTransformationElements getRowTransformationAccess() {
		return pRowTransformation;
	}
	
	public ParserRule getRowTransformationRule() {
		return getRowTransformationAccess().getRule();
	}
	
	//Transformation:
	//    (PathTransformation | FoldTransformation | ColumnTransformation | CellTransformation | RowTransformation)
	//;
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}
	
	//Pipeline:
	//    'pipe' '['
	//        (transformation += Transformation (',' transformation += Transformation )* (',')?)
	//    ']'';'
	//    ;
	public PipelineElements getPipelineAccess() {
		return pPipeline;
	}
	
	public ParserRule getPipelineRule() {
		return getPipelineAccess().getRule();
	}
	
	//Export:
	//    'export' table=ID 'to' path = STRING 'as' output = OutputType ';'
	//;
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
