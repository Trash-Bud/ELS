/**
 * generated by Xtext 2.32.0
 */
package pt.up.fe.els2023.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import pt.up.fe.els2023.dsl.DslPackage;
import pt.up.fe.els2023.dsl.RoundCellsTransformation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Round Cells Transformation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pt.up.fe.els2023.dsl.impl.RoundCellsTransformationImpl#getColumns <em>Columns</em>}</li>
 *   <li>{@link pt.up.fe.els2023.dsl.impl.RoundCellsTransformationImpl#getDigits <em>Digits</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RoundCellsTransformationImpl extends CellTransformationImpl implements RoundCellsTransformation
{
  /**
   * The cached value of the '{@link #getColumns() <em>Columns</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumns()
   * @generated
   * @ordered
   */
  protected EList<String> columns;

  /**
   * The default value of the '{@link #getDigits() <em>Digits</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDigits()
   * @generated
   * @ordered
   */
  protected static final int DIGITS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDigits() <em>Digits</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDigits()
   * @generated
   * @ordered
   */
  protected int digits = DIGITS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoundCellsTransformationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.ROUND_CELLS_TRANSFORMATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getColumns()
  {
    if (columns == null)
    {
      columns = new EDataTypeEList<String>(String.class, this, DslPackage.ROUND_CELLS_TRANSFORMATION__COLUMNS);
    }
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDigits()
  {
    return digits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDigits(int newDigits)
  {
    int oldDigits = digits;
    digits = newDigits;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ROUND_CELLS_TRANSFORMATION__DIGITS, oldDigits, digits));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.ROUND_CELLS_TRANSFORMATION__COLUMNS:
        return getColumns();
      case DslPackage.ROUND_CELLS_TRANSFORMATION__DIGITS:
        return getDigits();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.ROUND_CELLS_TRANSFORMATION__COLUMNS:
        getColumns().clear();
        getColumns().addAll((Collection<? extends String>)newValue);
        return;
      case DslPackage.ROUND_CELLS_TRANSFORMATION__DIGITS:
        setDigits((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ROUND_CELLS_TRANSFORMATION__COLUMNS:
        getColumns().clear();
        return;
      case DslPackage.ROUND_CELLS_TRANSFORMATION__DIGITS:
        setDigits(DIGITS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ROUND_CELLS_TRANSFORMATION__COLUMNS:
        return columns != null && !columns.isEmpty();
      case DslPackage.ROUND_CELLS_TRANSFORMATION__DIGITS:
        return digits != DIGITS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (columns: ");
    result.append(columns);
    result.append(", digits: ");
    result.append(digits);
    result.append(')');
    return result.toString();
  }

} //RoundCellsTransformationImpl
