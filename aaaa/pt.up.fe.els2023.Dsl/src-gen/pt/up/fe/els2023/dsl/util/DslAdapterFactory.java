/**
 * generated by Xtext 2.32.0
 */
package pt.up.fe.els2023.dsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import pt.up.fe.els2023.dsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see pt.up.fe.els2023.dsl.DslPackage
 * @generated
 */
public class DslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DslSwitch<Adapter> modelSwitch =
    new DslSwitch<Adapter>()
    {
      @Override
      public Adapter caseMyDsl(MyDsl object)
      {
        return createMyDslAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseCombinationOperations(CombinationOperations object)
      {
        return createCombinationOperationsAdapter();
      }
      @Override
      public Adapter caseTableOperations(TableOperations object)
      {
        return createTableOperationsAdapter();
      }
      @Override
      public Adapter caseSelectSource(SelectSource object)
      {
        return createSelectSourceAdapter();
      }
      @Override
      public Adapter caseInlineSource(InlineSource object)
      {
        return createInlineSourceAdapter();
      }
      @Override
      public Adapter caseSourceOperation(SourceOperation object)
      {
        return createSourceOperationAdapter();
      }
      @Override
      public Adapter caseTransformationTableOperation(TransformationTableOperation object)
      {
        return createTransformationTableOperationAdapter();
      }
      @Override
      public Adapter caseSelectPipeline(SelectPipeline object)
      {
        return createSelectPipelineAdapter();
      }
      @Override
      public Adapter caseInlinePipeline(InlinePipeline object)
      {
        return createInlinePipelineAdapter();
      }
      @Override
      public Adapter casePipelineTableOperation(PipelineTableOperation object)
      {
        return createPipelineTableOperationAdapter();
      }
      @Override
      public Adapter caseTransformOperation(TransformOperation object)
      {
        return createTransformOperationAdapter();
      }
      @Override
      public Adapter caseTable(Table object)
      {
        return createTableAdapter();
      }
      @Override
      public Adapter caseXmlType(XmlType object)
      {
        return createXmlTypeAdapter();
      }
      @Override
      public Adapter caseJsonType(JsonType object)
      {
        return createJsonTypeAdapter();
      }
      @Override
      public Adapter caseYamlType(YamlType object)
      {
        return createYamlTypeAdapter();
      }
      @Override
      public Adapter caseCsvType(CsvType object)
      {
        return createCsvTypeAdapter();
      }
      @Override
      public Adapter caseAutoType(AutoType object)
      {
        return createAutoTypeAdapter();
      }
      @Override
      public Adapter caseInputType(InputType object)
      {
        return createInputTypeAdapter();
      }
      @Override
      public Adapter caseHtmlType(HtmlType object)
      {
        return createHtmlTypeAdapter();
      }
      @Override
      public Adapter caseOutputType(OutputType object)
      {
        return createOutputTypeAdapter();
      }
      @Override
      public Adapter caseMetaData(MetaData object)
      {
        return createMetaDataAdapter();
      }
      @Override
      public Adapter caseSourceStore(SourceStore object)
      {
        return createSourceStoreAdapter();
      }
      @Override
      public Adapter caseSourceCoumnSelect(SourceCoumnSelect object)
      {
        return createSourceCoumnSelectAdapter();
      }
      @Override
      public Adapter caseSource(Source object)
      {
        return createSourceAdapter();
      }
      @Override
      public Adapter caseCanonicalizePathTransformation(CanonicalizePathTransformation object)
      {
        return createCanonicalizePathTransformationAdapter();
      }
      @Override
      public Adapter caseGetPathTransformation(GetPathTransformation object)
      {
        return createGetPathTransformationAdapter();
      }
      @Override
      public Adapter caseAppendPathTransformation(AppendPathTransformation object)
      {
        return createAppendPathTransformationAdapter();
      }
      @Override
      public Adapter casePathTransformation(PathTransformation object)
      {
        return createPathTransformationAdapter();
      }
      @Override
      public Adapter caseFoldAverageTranformation(FoldAverageTranformation object)
      {
        return createFoldAverageTranformationAdapter();
      }
      @Override
      public Adapter caseFoldSumTranformation(FoldSumTranformation object)
      {
        return createFoldSumTranformationAdapter();
      }
      @Override
      public Adapter caseGroupBy(GroupBy object)
      {
        return createGroupByAdapter();
      }
      @Override
      public Adapter caseFoldTransformation(FoldTransformation object)
      {
        return createFoldTransformationAdapter();
      }
      @Override
      public Adapter caseAddColumnTransformation(AddColumnTransformation object)
      {
        return createAddColumnTransformationAdapter();
      }
      @Override
      public Adapter caseRemoveColumnTransformation(RemoveColumnTransformation object)
      {
        return createRemoveColumnTransformationAdapter();
      }
      @Override
      public Adapter caseRenameColumnTransformation(RenameColumnTransformation object)
      {
        return createRenameColumnTransformationAdapter();
      }
      @Override
      public Adapter caseSelectColumnTransformation(SelectColumnTransformation object)
      {
        return createSelectColumnTransformationAdapter();
      }
      @Override
      public Adapter caseColumnTransformation(ColumnTransformation object)
      {
        return createColumnTransformationAdapter();
      }
      @Override
      public Adapter caseRoundCellsTransformation(RoundCellsTransformation object)
      {
        return createRoundCellsTransformationAdapter();
      }
      @Override
      public Adapter caseSetCellsTransformation(SetCellsTransformation object)
      {
        return createSetCellsTransformationAdapter();
      }
      @Override
      public Adapter caseCellTransformation(CellTransformation object)
      {
        return createCellTransformationAdapter();
      }
      @Override
      public Adapter caseSelectRowsTransformation(SelectRowsTransformation object)
      {
        return createSelectRowsTransformationAdapter();
      }
      @Override
      public Adapter caseSortRowsTransformation(SortRowsTransformation object)
      {
        return createSortRowsTransformationAdapter();
      }
      @Override
      public Adapter caseRowTransformation(RowTransformation object)
      {
        return createRowTransformationAdapter();
      }
      @Override
      public Adapter caseTransformation(Transformation object)
      {
        return createTransformationAdapter();
      }
      @Override
      public Adapter casePipeline(Pipeline object)
      {
        return createPipelineAdapter();
      }
      @Override
      public Adapter caseExport(Export object)
      {
        return createExportAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.MyDsl <em>My Dsl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.MyDsl
   * @generated
   */
  public Adapter createMyDslAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.CombinationOperations <em>Combination Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.CombinationOperations
   * @generated
   */
  public Adapter createCombinationOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.TableOperations <em>Table Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.TableOperations
   * @generated
   */
  public Adapter createTableOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SelectSource <em>Select Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SelectSource
   * @generated
   */
  public Adapter createSelectSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.InlineSource <em>Inline Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.InlineSource
   * @generated
   */
  public Adapter createInlineSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SourceOperation <em>Source Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SourceOperation
   * @generated
   */
  public Adapter createSourceOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.TransformationTableOperation <em>Transformation Table Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.TransformationTableOperation
   * @generated
   */
  public Adapter createTransformationTableOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SelectPipeline <em>Select Pipeline</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SelectPipeline
   * @generated
   */
  public Adapter createSelectPipelineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.InlinePipeline <em>Inline Pipeline</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.InlinePipeline
   * @generated
   */
  public Adapter createInlinePipelineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.PipelineTableOperation <em>Pipeline Table Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.PipelineTableOperation
   * @generated
   */
  public Adapter createPipelineTableOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.TransformOperation <em>Transform Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.TransformOperation
   * @generated
   */
  public Adapter createTransformOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Table <em>Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Table
   * @generated
   */
  public Adapter createTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.XmlType <em>Xml Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.XmlType
   * @generated
   */
  public Adapter createXmlTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.JsonType <em>Json Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.JsonType
   * @generated
   */
  public Adapter createJsonTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.YamlType <em>Yaml Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.YamlType
   * @generated
   */
  public Adapter createYamlTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.CsvType <em>Csv Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.CsvType
   * @generated
   */
  public Adapter createCsvTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.AutoType <em>Auto Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.AutoType
   * @generated
   */
  public Adapter createAutoTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.InputType <em>Input Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.InputType
   * @generated
   */
  public Adapter createInputTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.HtmlType <em>Html Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.HtmlType
   * @generated
   */
  public Adapter createHtmlTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.OutputType <em>Output Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.OutputType
   * @generated
   */
  public Adapter createOutputTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.MetaData <em>Meta Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.MetaData
   * @generated
   */
  public Adapter createMetaDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SourceStore <em>Source Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SourceStore
   * @generated
   */
  public Adapter createSourceStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SourceCoumnSelect <em>Source Coumn Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SourceCoumnSelect
   * @generated
   */
  public Adapter createSourceCoumnSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Source <em>Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Source
   * @generated
   */
  public Adapter createSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.CanonicalizePathTransformation <em>Canonicalize Path Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.CanonicalizePathTransformation
   * @generated
   */
  public Adapter createCanonicalizePathTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.GetPathTransformation <em>Get Path Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.GetPathTransformation
   * @generated
   */
  public Adapter createGetPathTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.AppendPathTransformation <em>Append Path Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.AppendPathTransformation
   * @generated
   */
  public Adapter createAppendPathTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.PathTransformation <em>Path Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.PathTransformation
   * @generated
   */
  public Adapter createPathTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.FoldAverageTranformation <em>Fold Average Tranformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.FoldAverageTranformation
   * @generated
   */
  public Adapter createFoldAverageTranformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.FoldSumTranformation <em>Fold Sum Tranformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.FoldSumTranformation
   * @generated
   */
  public Adapter createFoldSumTranformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.GroupBy <em>Group By</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.GroupBy
   * @generated
   */
  public Adapter createGroupByAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.FoldTransformation <em>Fold Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.FoldTransformation
   * @generated
   */
  public Adapter createFoldTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.AddColumnTransformation <em>Add Column Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.AddColumnTransformation
   * @generated
   */
  public Adapter createAddColumnTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.RemoveColumnTransformation <em>Remove Column Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.RemoveColumnTransformation
   * @generated
   */
  public Adapter createRemoveColumnTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.RenameColumnTransformation <em>Rename Column Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.RenameColumnTransformation
   * @generated
   */
  public Adapter createRenameColumnTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SelectColumnTransformation <em>Select Column Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SelectColumnTransformation
   * @generated
   */
  public Adapter createSelectColumnTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.ColumnTransformation <em>Column Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.ColumnTransformation
   * @generated
   */
  public Adapter createColumnTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.RoundCellsTransformation <em>Round Cells Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.RoundCellsTransformation
   * @generated
   */
  public Adapter createRoundCellsTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SetCellsTransformation <em>Set Cells Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SetCellsTransformation
   * @generated
   */
  public Adapter createSetCellsTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.CellTransformation <em>Cell Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.CellTransformation
   * @generated
   */
  public Adapter createCellTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SelectRowsTransformation <em>Select Rows Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SelectRowsTransformation
   * @generated
   */
  public Adapter createSelectRowsTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.SortRowsTransformation <em>Sort Rows Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.SortRowsTransformation
   * @generated
   */
  public Adapter createSortRowsTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.RowTransformation <em>Row Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.RowTransformation
   * @generated
   */
  public Adapter createRowTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Transformation <em>Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Transformation
   * @generated
   */
  public Adapter createTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Pipeline <em>Pipeline</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Pipeline
   * @generated
   */
  public Adapter createPipelineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link pt.up.fe.els2023.dsl.Export <em>Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see pt.up.fe.els2023.dsl.Export
   * @generated
   */
  public Adapter createExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DslAdapterFactory
