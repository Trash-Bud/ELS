/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MyDsl";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMyDsl
entryRuleMyDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyDslRule()); }
	iv_ruleMyDsl=ruleMyDsl
	{ $current=$iv_ruleMyDsl.current; }
	EOF;

// Rule MyDsl
ruleMyDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMyDslAccess().getPipelinesPipelineParserRuleCall_0_0());
				}
				lv_pipelines_0_0=rulePipeline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyDslRule());
					}
					add(
						$current,
						"pipelines",
						lv_pipelines_0_0,
						"org.xtext.example.mydsl.MyDsl.Pipeline");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMyDslAccess().getSourcesSourceParserRuleCall_1_0());
				}
				lv_sources_1_0=ruleSource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyDslRule());
					}
					add(
						$current,
						"sources",
						lv_sources_1_0,
						"org.xtext.example.mydsl.MyDsl.Source");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMyDslAccess().getTablesTableParserRuleCall_2_0());
				}
				lv_tables_2_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyDslRule());
					}
					add(
						$current,
						"tables",
						lv_tables_2_0,
						"org.xtext.example.mydsl.MyDsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMyDslAccess().getExportExportParserRuleCall_3_0());
				}
				lv_export_3_0=ruleExport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyDslRule());
					}
					add(
						$current,
						"export",
						lv_export_3_0,
						"org.xtext.example.mydsl.MyDsl.Export");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCombinationOperations
entryRuleCombinationOperations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCombinationOperationsRule()); }
	iv_ruleCombinationOperations=ruleCombinationOperations
	{ $current=$iv_ruleCombinationOperations.current; }
	EOF;

// Rule CombinationOperations
ruleCombinationOperations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_operation_0_1='merge'
					{
						newLeafNode(lv_operation_0_1, grammarAccess.getCombinationOperationsAccess().getOperationMergeKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinationOperationsRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_0_1, null);
					}
					    |
					lv_operation_0_2='append'
					{
						newLeafNode(lv_operation_0_2, grammarAccess.getCombinationOperationsAccess().getOperationAppendKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinationOperationsRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_0_2, null);
					}
				)
			)
		)
		(
			(
				(
					lv_type_1_1='union'
					{
						newLeafNode(lv_type_1_1, grammarAccess.getCombinationOperationsAccess().getTypeUnionKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinationOperationsRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_1, null);
					}
					    |
					lv_type_1_2='intersection'
					{
						newLeafNode(lv_type_1_2, grammarAccess.getCombinationOperationsAccess().getTypeIntersectionKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinationOperationsRule());
						}
						setWithLastConsumed($current, "type", lv_type_1_2, null);
					}
				)
			)
		)?
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getCombinationOperationsAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCombinationOperationsAccess().getTableOperationTableOperationsParserRuleCall_3_0());
				}
				lv_tableOperation_3_0=ruleTableOperations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCombinationOperationsRule());
					}
					add(
						$current,
						"tableOperation",
						lv_tableOperation_3_0,
						"org.xtext.example.mydsl.MyDsl.TableOperations");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getCombinationOperationsAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCombinationOperationsAccess().getTableOperationTableOperationsParserRuleCall_4_1_0());
					}
					lv_tableOperation_5_0=ruleTableOperations
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCombinationOperationsRule());
						}
						add(
							$current,
							"tableOperation",
							lv_tableOperation_5_0,
							"org.xtext.example.mydsl.MyDsl.TableOperations");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getCombinationOperationsAccess().getCommaKeyword_5());
			}
		)?
		otherlv_7=']'
		{
			newLeafNode(otherlv_7, grammarAccess.getCombinationOperationsAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTableOperations
entryRuleTableOperations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableOperationsRule()); }
	iv_ruleTableOperations=ruleTableOperations
	{ $current=$iv_ruleTableOperations.current; }
	EOF;

// Rule TableOperations
ruleTableOperations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTableOperationsAccess().getCombinationOperationsParserRuleCall_0());
		}
		this_CombinationOperations_0=ruleCombinationOperations
		{
			$current = $this_CombinationOperations_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTableOperationsAccess().getTransformOperationParserRuleCall_1());
		}
		this_TransformOperation_1=ruleTransformOperation
		{
			$current = $this_TransformOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTableOperationsAccess().getSourceOperationParserRuleCall_2());
		}
		this_SourceOperation_2=ruleSourceOperation
		{
			$current = $this_SourceOperation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSourceOperation
entryRuleSourceOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceOperationRule()); }
	iv_ruleSourceOperation=ruleSourceOperation
	{ $current=$iv_ruleSourceOperation.current; }
	EOF;

// Rule SourceOperation
ruleSourceOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_source_0_0=RULE_ID
			{
				newLeafNode(lv_source_0_0, grammarAccess.getSourceOperationAccess().getSourceIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSourceOperationRule());
				}
				setWithLastConsumed(
					$current,
					"source",
					lv_source_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTransformationTableOperation
entryRuleTransformationTableOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationTableOperationRule()); }
	iv_ruleTransformationTableOperation=ruleTransformationTableOperation
	{ $current=$iv_ruleTransformationTableOperation.current; }
	EOF;

// Rule TransformationTableOperation
ruleTransformationTableOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTransformationTableOperationAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformationTableOperationAccess().getTransformationTransformationParserRuleCall_1_0());
				}
				lv_transformation_1_0=ruleTransformation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformationTableOperationRule());
					}
					set(
						$current,
						"transformation",
						lv_transformation_1_0,
						"org.xtext.example.mydsl.MyDsl.Transformation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransformationTableOperationAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulePipelineTableOperation
entryRulePipelineTableOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineTableOperationRule()); }
	iv_rulePipelineTableOperation=rulePipelineTableOperation
	{ $current=$iv_rulePipelineTableOperation.current; }
	EOF;

// Rule PipelineTableOperation
rulePipelineTableOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_pipeline_0_0=RULE_ID
			{
				newLeafNode(lv_pipeline_0_0, grammarAccess.getPipelineTableOperationAccess().getPipelineIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPipelineTableOperationRule());
				}
				setWithLastConsumed(
					$current,
					"pipeline",
					lv_pipeline_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTransformOperation
entryRuleTransformOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformOperationRule()); }
	iv_ruleTransformOperation=ruleTransformOperation
	{ $current=$iv_ruleTransformOperation.current; }
	EOF;

// Rule TransformOperation
ruleTransformOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTransformOperationAccess().getSourceSourceOperationParserRuleCall_0_0());
				}
				lv_source_0_0=ruleSourceOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransformOperationRule());
					}
					set(
						$current,
						"source",
						lv_source_0_0,
						"org.xtext.example.mydsl.MyDsl.SourceOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='transform'
			{
				newLeafNode(otherlv_1, grammarAccess.getTransformOperationAccess().getTransformKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTransformOperationAccess().getOperationTransformationTableOperationParserRuleCall_1_1_0_0());
						}
						lv_operation_2_1=ruleTransformationTableOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransformOperationRule());
							}
							add(
								$current,
								"operation",
								lv_operation_2_1,
								"org.xtext.example.mydsl.MyDsl.TransformationTableOperation");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getTransformOperationAccess().getOperationPipelineTableOperationParserRuleCall_1_1_0_1());
						}
						lv_operation_2_2=rulePipelineTableOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransformOperationRule());
							}
							add(
								$current,
								"operation",
								lv_operation_2_2,
								"org.xtext.example.mydsl.MyDsl.PipelineTableOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)+
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTableAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getOperationTableOperationsParserRuleCall_2_0());
				}
				lv_operation_2_0=ruleTableOperations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"operation",
						lv_operation_2_0,
						"org.xtext.example.mydsl.MyDsl.TableOperations");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getTableAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleXmlType
entryRuleXmlType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXmlTypeRule()); }
	iv_ruleXmlType=ruleXmlType
	{ $current=$iv_ruleXmlType.current; }
	EOF;

// Rule XmlType
ruleXmlType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXmlTypeAccess().getXmlTypeAction_0(),
					$current);
			}
		)
		otherlv_1='xml'
		{
			newLeafNode(otherlv_1, grammarAccess.getXmlTypeAccess().getXmlKeyword_1());
		}
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getXmlTypeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			otherlv_3='xpath'
			{
				newLeafNode(otherlv_3, grammarAccess.getXmlTypeAccess().getXpathKeyword_2_1());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getXmlTypeAccess().getEqualsSignKeyword_2_2());
			}
			(
				(
					lv_path_5_0=RULE_STRING
					{
						newLeafNode(lv_path_5_0, grammarAccess.getXmlTypeAccess().getPathSTRINGTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXmlTypeRule());
						}
						setWithLastConsumed(
							$current,
							"path",
							lv_path_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getXmlTypeAccess().getCommaKeyword_2_4());
			}
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getXmlTypeAccess().getRightCurlyBracketKeyword_2_5());
			}
		)?
	)
;

// Entry rule entryRuleJsonType
entryRuleJsonType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonTypeRule()); }
	iv_ruleJsonType=ruleJsonType
	{ $current=$iv_ruleJsonType.current; }
	EOF;

// Rule JsonType
ruleJsonType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonTypeAccess().getJsonTypeAction_0(),
					$current);
			}
		)
		otherlv_1='json'
		{
			newLeafNode(otherlv_1, grammarAccess.getJsonTypeAccess().getJsonKeyword_1());
		}
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getJsonTypeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			otherlv_3='jsonpath'
			{
				newLeafNode(otherlv_3, grammarAccess.getJsonTypeAccess().getJsonpathKeyword_2_1());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getJsonTypeAccess().getEqualsSignKeyword_2_2());
			}
			(
				(
					lv_path_5_0=RULE_STRING
					{
						newLeafNode(lv_path_5_0, grammarAccess.getJsonTypeAccess().getPathSTRINGTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJsonTypeRule());
						}
						setWithLastConsumed(
							$current,
							"path",
							lv_path_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getJsonTypeAccess().getCommaKeyword_2_4());
			}
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getJsonTypeAccess().getRightCurlyBracketKeyword_2_5());
			}
		)?
	)
;

// Entry rule entryRuleYamlType
entryRuleYamlType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYamlTypeRule()); }
	iv_ruleYamlType=ruleYamlType
	{ $current=$iv_ruleYamlType.current; }
	EOF;

// Rule YamlType
ruleYamlType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYamlTypeAccess().getYamlTypeAction_0(),
					$current);
			}
		)
		otherlv_1='yaml'
		{
			newLeafNode(otherlv_1, grammarAccess.getYamlTypeAccess().getYamlKeyword_1());
		}
	)
;

// Entry rule entryRuleCsvType
entryRuleCsvType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCsvTypeRule()); }
	iv_ruleCsvType=ruleCsvType
	{ $current=$iv_ruleCsvType.current; }
	EOF;

// Rule CsvType
ruleCsvType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCsvTypeAccess().getCsvTypeAction_0(),
					$current);
			}
		)
		otherlv_1='csv'
		{
			newLeafNode(otherlv_1, grammarAccess.getCsvTypeAccess().getCsvKeyword_1());
		}
	)
;

// Entry rule entryRuleAutoType
entryRuleAutoType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoTypeRule()); }
	iv_ruleAutoType=ruleAutoType
	{ $current=$iv_ruleAutoType.current; }
	EOF;

// Rule AutoType
ruleAutoType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAutoTypeAccess().getAutoTypeAction_0(),
					$current);
			}
		)
		otherlv_1='auto'
		{
			newLeafNode(otherlv_1, grammarAccess.getAutoTypeAccess().getAutoKeyword_1());
		}
	)
;

// Entry rule entryRuleInputType
entryRuleInputType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputTypeRule()); }
	iv_ruleInputType=ruleInputType
	{ $current=$iv_ruleInputType.current; }
	EOF;

// Rule InputType
ruleInputType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInputTypeAccess().getJsonTypeParserRuleCall_0());
		}
		this_JsonType_0=ruleJsonType
		{
			$current = $this_JsonType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputTypeAccess().getXmlTypeParserRuleCall_1());
		}
		this_XmlType_1=ruleXmlType
		{
			$current = $this_XmlType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputTypeAccess().getCsvTypeParserRuleCall_2());
		}
		this_CsvType_2=ruleCsvType
		{
			$current = $this_CsvType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputTypeAccess().getYamlTypeParserRuleCall_3());
		}
		this_YamlType_3=ruleYamlType
		{
			$current = $this_YamlType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputTypeAccess().getAutoTypeParserRuleCall_4());
		}
		this_AutoType_4=ruleAutoType
		{
			$current = $this_AutoType_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHtmlType
entryRuleHtmlType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHtmlTypeRule()); }
	iv_ruleHtmlType=ruleHtmlType
	{ $current=$iv_ruleHtmlType.current; }
	EOF;

// Rule HtmlType
ruleHtmlType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHtmlTypeAccess().getHtmlTypeAction_0(),
					$current);
			}
		)
		otherlv_1='html'
		{
			newLeafNode(otherlv_1, grammarAccess.getHtmlTypeAccess().getHtmlKeyword_1());
		}
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getHtmlTypeAccess().getLeftCurlyBracketKeyword_2_0());
			}
			otherlv_3='css'
			{
				newLeafNode(otherlv_3, grammarAccess.getHtmlTypeAccess().getCssKeyword_2_1());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getHtmlTypeAccess().getEqualsSignKeyword_2_2());
			}
			(
				(
					lv_cssPath_5_0=RULE_STRING
					{
						newLeafNode(lv_cssPath_5_0, grammarAccess.getHtmlTypeAccess().getCssPathSTRINGTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHtmlTypeRule());
						}
						setWithLastConsumed(
							$current,
							"cssPath",
							lv_cssPath_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getHtmlTypeAccess().getRightCurlyBracketKeyword_2_4());
			}
		)?
	)
;

// Entry rule entryRuleOutputType
entryRuleOutputType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputTypeRule()); }
	iv_ruleOutputType=ruleOutputType
	{ $current=$iv_ruleOutputType.current; }
	EOF;

// Rule OutputType
ruleOutputType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputTypeAccess().getTypeHtmlTypeParserRuleCall_0_0());
				}
				lv_type_0_1=ruleHtmlType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_1,
						"org.xtext.example.mydsl.MyDsl.HtmlType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getOutputTypeAccess().getTypeAutoTypeParserRuleCall_0_1());
				}
				lv_type_0_2=ruleAutoType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_2,
						"org.xtext.example.mydsl.MyDsl.AutoType");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getOutputTypeAccess().getTypeCsvTypeParserRuleCall_0_2());
				}
				lv_type_0_3=ruleCsvType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_3,
						"org.xtext.example.mydsl.MyDsl.CsvType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMetaData
entryRuleMetaData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetaDataRule()); }
	iv_ruleMetaData=ruleMetaData
	{ $current=$iv_ruleMetaData.current; }
	EOF;

// Rule MetaData
ruleMetaData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_metadata_0_1='filepath'
				{
					newLeafNode(lv_metadata_0_1, grammarAccess.getMetaDataAccess().getMetadataFilepathKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetaDataRule());
					}
					setWithLastConsumed($current, "metadata", lv_metadata_0_1, null);
				}
				    |
				lv_metadata_0_2='lastmodified'
				{
					newLeafNode(lv_metadata_0_2, grammarAccess.getMetaDataAccess().getMetadataLastmodifiedKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetaDataRule());
					}
					setWithLastConsumed($current, "metadata", lv_metadata_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleSourceStore
entryRuleSourceStore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceStoreRule()); }
	iv_ruleSourceStore=ruleSourceStore
	{ $current=$iv_ruleSourceStore.current; }
	EOF;

// Rule SourceStore
ruleSourceStore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='store'
		{
			newLeafNode(otherlv_0, grammarAccess.getSourceStoreAccess().getStoreKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceStoreAccess().getMetadataMetaDataParserRuleCall_1_0());
				}
				lv_metadata_1_0=ruleMetaData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceStoreRule());
					}
					set(
						$current,
						"metadata",
						lv_metadata_1_0,
						"org.xtext.example.mydsl.MyDsl.MetaData");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getSourceStoreAccess().getInKeyword_2());
		}
		(
			(
				lv_column_3_0=RULE_STRING
				{
					newLeafNode(lv_column_3_0, grammarAccess.getSourceStoreAccess().getColumnSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceStoreRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSourceCoumnSelect
entryRuleSourceCoumnSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceCoumnSelectRule()); }
	iv_ruleSourceCoumnSelect=ruleSourceCoumnSelect
	{ $current=$iv_ruleSourceCoumnSelect.current; }
	EOF;

// Rule SourceCoumnSelect
ruleSourceCoumnSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='selecting'
		{
			newLeafNode(otherlv_0, grammarAccess.getSourceCoumnSelectAccess().getSelectingKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSourceCoumnSelectAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getSourceCoumnSelectAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceCoumnSelectRule());
					}
					addWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSourceCoumnSelectAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_column_4_0=RULE_STRING
					{
						newLeafNode(lv_column_4_0, grammarAccess.getSourceCoumnSelectAccess().getColumnSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSourceCoumnSelectRule());
						}
						addWithLastConsumed(
							$current,
							"column",
							lv_column_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getSourceCoumnSelectAccess().getCommaKeyword_4());
			}
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getSourceCoumnSelectAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSource
entryRuleSource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceRule()); }
	iv_ruleSource=ruleSource
	{ $current=$iv_ruleSource.current; }
	EOF;

// Rule Source
ruleSource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSourceAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSourceAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='import'
		{
			newLeafNode(otherlv_2, grammarAccess.getSourceAccess().getImportKeyword_2());
		}
		(
			(
				lv_query_3_0=RULE_STRING
				{
					newLeafNode(lv_query_3_0, grammarAccess.getSourceAccess().getQuerySTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceRule());
					}
					setWithLastConsumed(
						$current,
						"query",
						lv_query_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getSourceAccess().getFromKeyword_4());
		}
		(
			(
				lv_filePath_5_0=RULE_STRING
				{
					newLeafNode(lv_filePath_5_0, grammarAccess.getSourceAccess().getFilePathSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceRule());
					}
					setWithLastConsumed(
						$current,
						"filePath",
						lv_filePath_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_6='as'
			{
				newLeafNode(otherlv_6, grammarAccess.getSourceAccess().getAsKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSourceAccess().getInputTypeInputTypeParserRuleCall_6_1_0());
					}
					lv_inputType_7_0=ruleInputType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSourceRule());
						}
						set(
							$current,
							"inputType",
							lv_inputType_7_0,
							"org.xtext.example.mydsl.MyDsl.InputType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceAccess().getStoreSourceStoreParserRuleCall_7_0());
				}
				lv_store_8_0=ruleSourceStore
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceRule());
					}
					add(
						$current,
						"store",
						lv_store_8_0,
						"org.xtext.example.mydsl.MyDsl.SourceStore");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceAccess().getSelectSourceCoumnSelectParserRuleCall_8_0());
				}
				lv_select_9_0=ruleSourceCoumnSelect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceRule());
					}
					set(
						$current,
						"select",
						lv_select_9_0,
						"org.xtext.example.mydsl.MyDsl.SourceCoumnSelect");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_10=';'
		{
			newLeafNode(otherlv_10, grammarAccess.getSourceAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleCanonicalizePathTransformation
entryRuleCanonicalizePathTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCanonicalizePathTransformationRule()); }
	iv_ruleCanonicalizePathTransformation=ruleCanonicalizePathTransformation
	{ $current=$iv_ruleCanonicalizePathTransformation.current; }
	EOF;

// Rule CanonicalizePathTransformation
ruleCanonicalizePathTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCanonicalizePathTransformationAccess().getCanonicalizePathTransformationAction_0(),
					$current);
			}
		)
		otherlv_1='canonicalize'
		{
			newLeafNode(otherlv_1, grammarAccess.getCanonicalizePathTransformationAccess().getCanonicalizeKeyword_1());
		}
		otherlv_2='path'
		{
			newLeafNode(otherlv_2, grammarAccess.getCanonicalizePathTransformationAccess().getPathKeyword_2());
		}
	)
;

// Entry rule entryRuleGetPathTransformation
entryRuleGetPathTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetPathTransformationRule()); }
	iv_ruleGetPathTransformation=ruleGetPathTransformation
	{ $current=$iv_ruleGetPathTransformation.current; }
	EOF;

// Rule GetPathTransformation
ruleGetPathTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGetPathTransformationAccess().getGetPathTransformationAction_0(),
					$current);
			}
		)
		otherlv_1='get'
		{
			newLeafNode(otherlv_1, grammarAccess.getGetPathTransformationAccess().getGetKeyword_1());
		}
		otherlv_2='path'
		{
			newLeafNode(otherlv_2, grammarAccess.getGetPathTransformationAccess().getPathKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getGetPathTransformationAccess().getNameKeyword_3());
		}
	)
;

// Entry rule entryRuleAppendPathTransformation
entryRuleAppendPathTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppendPathTransformationRule()); }
	iv_ruleAppendPathTransformation=ruleAppendPathTransformation
	{ $current=$iv_ruleAppendPathTransformation.current; }
	EOF;

// Rule AppendPathTransformation
ruleAppendPathTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='append'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppendPathTransformationAccess().getAppendKeyword_0());
		}
		otherlv_1='path'
		{
			newLeafNode(otherlv_1, grammarAccess.getAppendPathTransformationAccess().getPathKeyword_1());
		}
		(
			(
				lv_path_2_0=RULE_STRING
				{
					newLeafNode(lv_path_2_0, grammarAccess.getAppendPathTransformationAccess().getPathSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppendPathTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulePathTransformation
entryRulePathTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathTransformationRule()); }
	iv_rulePathTransformation=rulePathTransformation
	{ $current=$iv_rulePathTransformation.current; }
	EOF;

// Rule PathTransformation
rulePathTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='in'
		{
			newLeafNode(otherlv_0, grammarAccess.getPathTransformationAccess().getInKeyword_0());
		}
		(
			(
				lv_column_1_0=RULE_STRING
				{
					newLeafNode(lv_column_1_0, grammarAccess.getPathTransformationAccess().getColumnSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPathTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPathTransformationAccess().getOperationAppendPathTransformationParserRuleCall_2_0_0());
					}
					lv_operation_2_1=ruleAppendPathTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_2_1,
							"org.xtext.example.mydsl.MyDsl.AppendPathTransformation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPathTransformationAccess().getOperationCanonicalizePathTransformationParserRuleCall_2_0_1());
					}
					lv_operation_2_2=ruleCanonicalizePathTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_2_2,
							"org.xtext.example.mydsl.MyDsl.CanonicalizePathTransformation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPathTransformationAccess().getOperationGetPathTransformationParserRuleCall_2_0_2());
					}
					lv_operation_2_3=ruleGetPathTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_2_3,
							"org.xtext.example.mydsl.MyDsl.GetPathTransformation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFoldMaxTranformation
entryRuleFoldMaxTranformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFoldMaxTranformationRule()); }
	iv_ruleFoldMaxTranformation=ruleFoldMaxTranformation
	{ $current=$iv_ruleFoldMaxTranformation.current; }
	EOF;

// Rule FoldMaxTranformation
ruleFoldMaxTranformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='in'
		{
			newLeafNode(otherlv_0, grammarAccess.getFoldMaxTranformationAccess().getInKeyword_0());
		}
		(
			(
				lv_column_1_0=RULE_STRING
				{
					newLeafNode(lv_column_1_0, grammarAccess.getFoldMaxTranformationAccess().getColumnSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFoldMaxTranformationRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='fold'
		{
			newLeafNode(otherlv_2, grammarAccess.getFoldMaxTranformationAccess().getFoldKeyword_2());
		}
		otherlv_3='max'
		{
			newLeafNode(otherlv_3, grammarAccess.getFoldMaxTranformationAccess().getMaxKeyword_3());
		}
	)
;

// Entry rule entryRuleFoldAverageTranformation
entryRuleFoldAverageTranformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFoldAverageTranformationRule()); }
	iv_ruleFoldAverageTranformation=ruleFoldAverageTranformation
	{ $current=$iv_ruleFoldAverageTranformation.current; }
	EOF;

// Rule FoldAverageTranformation
ruleFoldAverageTranformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFoldAverageTranformationAccess().getFoldAverageTranformationAction_0(),
					$current);
			}
		)
		otherlv_1='fold'
		{
			newLeafNode(otherlv_1, grammarAccess.getFoldAverageTranformationAccess().getFoldKeyword_1());
		}
		otherlv_2='avg'
		{
			newLeafNode(otherlv_2, grammarAccess.getFoldAverageTranformationAccess().getAvgKeyword_2());
		}
	)
;

// Entry rule entryRuleFoldSumTranformation
entryRuleFoldSumTranformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFoldSumTranformationRule()); }
	iv_ruleFoldSumTranformation=ruleFoldSumTranformation
	{ $current=$iv_ruleFoldSumTranformation.current; }
	EOF;

// Rule FoldSumTranformation
ruleFoldSumTranformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFoldSumTranformationAccess().getFoldSumTranformationAction_0(),
					$current);
			}
		)
		otherlv_1='fold'
		{
			newLeafNode(otherlv_1, grammarAccess.getFoldSumTranformationAccess().getFoldKeyword_1());
		}
		otherlv_2='sum'
		{
			newLeafNode(otherlv_2, grammarAccess.getFoldSumTranformationAccess().getSumKeyword_2());
		}
	)
;

// Entry rule entryRuleGroupBy
entryRuleGroupBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupByRule()); }
	iv_ruleGroupBy=ruleGroupBy
	{ $current=$iv_ruleGroupBy.current; }
	EOF;

// Rule GroupBy
ruleGroupBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='group'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupByAccess().getGroupKeyword_0());
		}
		otherlv_1='by'
		{
			newLeafNode(otherlv_1, grammarAccess.getGroupByAccess().getByKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getGroupByAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGroupByRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFoldTransformation
entryRuleFoldTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFoldTransformationRule()); }
	iv_ruleFoldTransformation=ruleFoldTransformation
	{ $current=$iv_ruleFoldTransformation.current; }
	EOF;

// Rule FoldTransformation
ruleFoldTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFoldTransformationAccess().getOperationFoldMaxTranformationParserRuleCall_0_0_0());
					}
					lv_operation_0_1=ruleFoldMaxTranformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFoldTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_0_1,
							"org.xtext.example.mydsl.MyDsl.FoldMaxTranformation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFoldTransformationAccess().getOperationFoldSumTranformationParserRuleCall_0_0_1());
					}
					lv_operation_0_2=ruleFoldSumTranformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFoldTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_0_2,
							"org.xtext.example.mydsl.MyDsl.FoldSumTranformation");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFoldTransformationAccess().getOperationFoldAverageTranformationParserRuleCall_0_0_2());
					}
					lv_operation_0_3=ruleFoldAverageTranformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFoldTransformationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_0_3,
							"org.xtext.example.mydsl.MyDsl.FoldAverageTranformation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFoldTransformationAccess().getGroupByGroupByParserRuleCall_1_0());
				}
				lv_groupBy_1_0=ruleGroupBy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFoldTransformationRule());
					}
					set(
						$current,
						"groupBy",
						lv_groupBy_1_0,
						"org.xtext.example.mydsl.MyDsl.GroupBy");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAddColumnTransformation
entryRuleAddColumnTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddColumnTransformationRule()); }
	iv_ruleAddColumnTransformation=ruleAddColumnTransformation
	{ $current=$iv_ruleAddColumnTransformation.current; }
	EOF;

// Rule AddColumnTransformation
ruleAddColumnTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddColumnTransformationAccess().getAddKeyword_0());
		}
		(
			(
				lv_column_1_0=RULE_STRING
				{
					newLeafNode(lv_column_1_0, grammarAccess.getAddColumnTransformationAccess().getColumnSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddColumnTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddColumnTransformationAccess().getWithKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getAddColumnTransformationAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddColumnTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRemoveColumnTransformation
entryRuleRemoveColumnTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveColumnTransformationRule()); }
	iv_ruleRemoveColumnTransformation=ruleRemoveColumnTransformation
	{ $current=$iv_ruleRemoveColumnTransformation.current; }
	EOF;

// Rule RemoveColumnTransformation
ruleRemoveColumnTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveColumnTransformationAccess().getRemoveKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getRemoveColumnTransformationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getRemoveColumnTransformationAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveColumnTransformationRule());
					}
					addWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getRemoveColumnTransformationAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_column_4_0=RULE_STRING
					{
						newLeafNode(lv_column_4_0, grammarAccess.getRemoveColumnTransformationAccess().getColumnSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRemoveColumnTransformationRule());
						}
						addWithLastConsumed(
							$current,
							"column",
							lv_column_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getRemoveColumnTransformationAccess().getCommaKeyword_4());
			}
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getRemoveColumnTransformationAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRenameColumnTransformation
entryRuleRenameColumnTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnTransformationRule()); }
	iv_ruleRenameColumnTransformation=ruleRenameColumnTransformation
	{ $current=$iv_ruleRenameColumnTransformation.current; }
	EOF;

// Rule RenameColumnTransformation
ruleRenameColumnTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameColumnTransformationAccess().getRenameKeyword_0());
		}
		(
			(
				lv_from_1_0=RULE_STRING
				{
					newLeafNode(lv_from_1_0, grammarAccess.getRenameColumnTransformationAccess().getFromSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"from",
						lv_from_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getRenameColumnTransformationAccess().getToKeyword_2());
		}
		(
			(
				lv_to_3_0=RULE_STRING
				{
					newLeafNode(lv_to_3_0, grammarAccess.getRenameColumnTransformationAccess().getToSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnTransformationRule());
					}
					setWithLastConsumed(
						$current,
						"to",
						lv_to_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSelectColumnTransformation
entryRuleSelectColumnTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectColumnTransformationRule()); }
	iv_ruleSelectColumnTransformation=ruleSelectColumnTransformation
	{ $current=$iv_ruleSelectColumnTransformation.current; }
	EOF;

// Rule SelectColumnTransformation
ruleSelectColumnTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectColumnTransformationAccess().getSelectKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectColumnTransformationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getSelectColumnTransformationAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectColumnTransformationRule());
					}
					addWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSelectColumnTransformationAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_column_4_0=RULE_STRING
					{
						newLeafNode(lv_column_4_0, grammarAccess.getSelectColumnTransformationAccess().getColumnSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectColumnTransformationRule());
						}
						addWithLastConsumed(
							$current,
							"column",
							lv_column_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectColumnTransformationAccess().getCommaKeyword_4());
			}
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getSelectColumnTransformationAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleColumnTransformation
entryRuleColumnTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnTransformationRule()); }
	iv_ruleColumnTransformation=ruleColumnTransformation
	{ $current=$iv_ruleColumnTransformation.current; }
	EOF;

// Rule ColumnTransformation
ruleColumnTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getColumnTransformationAccess().getAddColumnTransformationParserRuleCall_0());
		}
		this_AddColumnTransformation_0=ruleAddColumnTransformation
		{
			$current = $this_AddColumnTransformation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getColumnTransformationAccess().getRemoveColumnTransformationParserRuleCall_1());
		}
		this_RemoveColumnTransformation_1=ruleRemoveColumnTransformation
		{
			$current = $this_RemoveColumnTransformation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getColumnTransformationAccess().getRenameColumnTransformationParserRuleCall_2());
		}
		this_RenameColumnTransformation_2=ruleRenameColumnTransformation
		{
			$current = $this_RenameColumnTransformation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getColumnTransformationAccess().getSelectColumnTransformationParserRuleCall_3());
		}
		this_SelectColumnTransformation_3=ruleSelectColumnTransformation
		{
			$current = $this_SelectColumnTransformation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	iv_ruleTransformation=ruleTransformation
	{ $current=$iv_ruleTransformation.current; }
	EOF;

// Rule Transformation
ruleTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getPathTransformationParserRuleCall_0());
		}
		this_PathTransformation_0=rulePathTransformation
		{
			$current = $this_PathTransformation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getFoldTransformationParserRuleCall_1());
		}
		this_FoldTransformation_1=ruleFoldTransformation
		{
			$current = $this_FoldTransformation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransformationAccess().getColumnTransformationParserRuleCall_2());
		}
		this_ColumnTransformation_2=ruleColumnTransformation
		{
			$current = $this_ColumnTransformation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePipeline
entryRulePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineRule()); }
	iv_rulePipeline=rulePipeline
	{ $current=$iv_rulePipeline.current; }
	EOF;

// Rule Pipeline
rulePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPipelineAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPipelineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getPipelineAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='pipe'
		{
			newLeafNode(otherlv_2, grammarAccess.getPipelineAccess().getPipeKeyword_2());
		}
		otherlv_3='['
		{
			newLeafNode(otherlv_3, grammarAccess.getPipelineAccess().getLeftSquareBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPipelineAccess().getTransformationTransformationParserRuleCall_4_0_0());
					}
					lv_transformation_4_0=ruleTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPipelineRule());
						}
						add(
							$current,
							"transformation",
							lv_transformation_4_0,
							"org.xtext.example.mydsl.MyDsl.Transformation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getPipelineAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPipelineAccess().getTransformationTransformationParserRuleCall_4_1_1_0());
						}
						lv_transformation_6_0=ruleTransformation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPipelineRule());
							}
							add(
								$current,
								"transformation",
								lv_transformation_6_0,
								"org.xtext.example.mydsl.MyDsl.Transformation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getPipelineAccess().getCommaKeyword_4_2());
				}
			)?
		)
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getPipelineAccess().getRightSquareBracketKeyword_5());
		}
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getPipelineAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	iv_ruleExport=ruleExport
	{ $current=$iv_ruleExport.current; }
	EOF;

// Rule Export
ruleExport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='export'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportAccess().getExportKeyword_0());
		}
		(
			(
				lv_table_1_0=RULE_ID
				{
					newLeafNode(lv_table_1_0, grammarAccess.getExportAccess().getTableIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExportRule());
					}
					setWithLastConsumed(
						$current,
						"table",
						lv_table_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getExportAccess().getToKeyword_2());
		}
		(
			(
				lv_path_3_0=RULE_STRING
				{
					newLeafNode(lv_path_3_0, grammarAccess.getExportAccess().getPathSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExportRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getExportAccess().getAsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportAccess().getOutputOutputTypeParserRuleCall_5_0());
				}
				lv_output_5_0=ruleOutputType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportRule());
					}
					set(
						$current,
						"output",
						lv_output_5_0,
						"org.xtext.example.mydsl.MyDsl.OutputType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getExportAccess().getSemicolonKeyword_6());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
