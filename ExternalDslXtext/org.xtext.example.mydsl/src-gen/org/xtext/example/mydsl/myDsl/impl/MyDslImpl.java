/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Export;
import org.xtext.example.mydsl.myDsl.MyDsl;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Pipeline;
import org.xtext.example.mydsl.myDsl.Source;
import org.xtext.example.mydsl.myDsl.Table;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>My Dsl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MyDslImpl#getPipelines <em>Pipelines</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MyDslImpl#getSources <em>Sources</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MyDslImpl#getTables <em>Tables</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.MyDslImpl#getExport <em>Export</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MyDslImpl extends MinimalEObjectImpl.Container implements MyDsl
{
  /**
   * The cached value of the '{@link #getPipelines() <em>Pipelines</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPipelines()
   * @generated
   * @ordered
   */
  protected EList<Pipeline> pipelines;

  /**
   * The cached value of the '{@link #getSources() <em>Sources</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSources()
   * @generated
   * @ordered
   */
  protected EList<Source> sources;

  /**
   * The cached value of the '{@link #getTables() <em>Tables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTables()
   * @generated
   * @ordered
   */
  protected EList<Table> tables;

  /**
   * The cached value of the '{@link #getExport() <em>Export</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExport()
   * @generated
   * @ordered
   */
  protected EList<Export> export;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MY_DSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Pipeline> getPipelines()
  {
    if (pipelines == null)
    {
      pipelines = new EObjectContainmentEList<Pipeline>(Pipeline.class, this, MyDslPackage.MY_DSL__PIPELINES);
    }
    return pipelines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Source> getSources()
  {
    if (sources == null)
    {
      sources = new EObjectContainmentEList<Source>(Source.class, this, MyDslPackage.MY_DSL__SOURCES);
    }
    return sources;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Table> getTables()
  {
    if (tables == null)
    {
      tables = new EObjectContainmentEList<Table>(Table.class, this, MyDslPackage.MY_DSL__TABLES);
    }
    return tables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Export> getExport()
  {
    if (export == null)
    {
      export = new EObjectContainmentEList<Export>(Export.class, this, MyDslPackage.MY_DSL__EXPORT);
    }
    return export;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MY_DSL__PIPELINES:
        return ((InternalEList<?>)getPipelines()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MY_DSL__SOURCES:
        return ((InternalEList<?>)getSources()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MY_DSL__TABLES:
        return ((InternalEList<?>)getTables()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MY_DSL__EXPORT:
        return ((InternalEList<?>)getExport()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MY_DSL__PIPELINES:
        return getPipelines();
      case MyDslPackage.MY_DSL__SOURCES:
        return getSources();
      case MyDslPackage.MY_DSL__TABLES:
        return getTables();
      case MyDslPackage.MY_DSL__EXPORT:
        return getExport();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MY_DSL__PIPELINES:
        getPipelines().clear();
        getPipelines().addAll((Collection<? extends Pipeline>)newValue);
        return;
      case MyDslPackage.MY_DSL__SOURCES:
        getSources().clear();
        getSources().addAll((Collection<? extends Source>)newValue);
        return;
      case MyDslPackage.MY_DSL__TABLES:
        getTables().clear();
        getTables().addAll((Collection<? extends Table>)newValue);
        return;
      case MyDslPackage.MY_DSL__EXPORT:
        getExport().clear();
        getExport().addAll((Collection<? extends Export>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MY_DSL__PIPELINES:
        getPipelines().clear();
        return;
      case MyDslPackage.MY_DSL__SOURCES:
        getSources().clear();
        return;
      case MyDslPackage.MY_DSL__TABLES:
        getTables().clear();
        return;
      case MyDslPackage.MY_DSL__EXPORT:
        getExport().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MY_DSL__PIPELINES:
        return pipelines != null && !pipelines.isEmpty();
      case MyDslPackage.MY_DSL__SOURCES:
        return sources != null && !sources.isEmpty();
      case MyDslPackage.MY_DSL__TABLES:
        return tables != null && !tables.isEmpty();
      case MyDslPackage.MY_DSL__EXPORT:
        return export != null && !export.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MyDslImpl
